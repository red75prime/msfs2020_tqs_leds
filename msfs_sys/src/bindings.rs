#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
/* automatically generated by rust-bindgen 0.70.1 */

pub type DWORD = ::std::os::raw::c_ulong;
pub type BOOL = ::std::os::raw::c_int;
pub type BYTE = ::std::os::raw::c_uchar;
pub type UINT64 = ::std::os::raw::c_ulonglong;
pub type CHAR = ::std::os::raw::c_char;
pub type LPCSTR = *const CHAR;
pub type HANDLE = *mut ::std::os::raw::c_void;
pub type HRESULT = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GUID {
    pub Data1: ::std::os::raw::c_ulong,
    pub Data2: ::std::os::raw::c_ushort,
    pub Data3: ::std::os::raw::c_ushort,
    pub Data4: [::std::os::raw::c_uchar; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GUID"][::std::mem::size_of::<_GUID>() - 16usize];
    ["Alignment of _GUID"][::std::mem::align_of::<_GUID>() - 4usize];
    ["Offset of field: _GUID::Data1"][::std::mem::offset_of!(_GUID, Data1) - 0usize];
    ["Offset of field: _GUID::Data2"][::std::mem::offset_of!(_GUID, Data2) - 4usize];
    ["Offset of field: _GUID::Data3"][::std::mem::offset_of!(_GUID, Data3) - 6usize];
    ["Offset of field: _GUID::Data4"][::std::mem::offset_of!(_GUID, Data4) - 8usize];
};
pub type GUID = _GUID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HWND__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HWND__"][::std::mem::size_of::<HWND__>() - 4usize];
    ["Alignment of HWND__"][::std::mem::align_of::<HWND__>() - 4usize];
    ["Offset of field: HWND__::unused"][::std::mem::offset_of!(HWND__, unused) - 0usize];
};
pub type HWND = *mut HWND__;
pub type SIMCONNECT_OBJECT_ID = DWORD;
pub const SIMCONNECT_RECV_ID_NULL: SIMCONNECT_RECV_ID = 0;
pub const SIMCONNECT_RECV_ID_EXCEPTION: SIMCONNECT_RECV_ID = 1;
pub const SIMCONNECT_RECV_ID_OPEN: SIMCONNECT_RECV_ID = 2;
pub const SIMCONNECT_RECV_ID_QUIT: SIMCONNECT_RECV_ID = 3;
pub const SIMCONNECT_RECV_ID_EVENT: SIMCONNECT_RECV_ID = 4;
pub const SIMCONNECT_RECV_ID_EVENT_OBJECT_ADDREMOVE: SIMCONNECT_RECV_ID = 5;
pub const SIMCONNECT_RECV_ID_EVENT_FILENAME: SIMCONNECT_RECV_ID = 6;
pub const SIMCONNECT_RECV_ID_EVENT_FRAME: SIMCONNECT_RECV_ID = 7;
pub const SIMCONNECT_RECV_ID_SIMOBJECT_DATA: SIMCONNECT_RECV_ID = 8;
pub const SIMCONNECT_RECV_ID_SIMOBJECT_DATA_BYTYPE: SIMCONNECT_RECV_ID = 9;
pub const SIMCONNECT_RECV_ID_WEATHER_OBSERVATION: SIMCONNECT_RECV_ID = 10;
pub const SIMCONNECT_RECV_ID_CLOUD_STATE: SIMCONNECT_RECV_ID = 11;
pub const SIMCONNECT_RECV_ID_ASSIGNED_OBJECT_ID: SIMCONNECT_RECV_ID = 12;
pub const SIMCONNECT_RECV_ID_RESERVED_KEY: SIMCONNECT_RECV_ID = 13;
pub const SIMCONNECT_RECV_ID_CUSTOM_ACTION: SIMCONNECT_RECV_ID = 14;
pub const SIMCONNECT_RECV_ID_SYSTEM_STATE: SIMCONNECT_RECV_ID = 15;
pub const SIMCONNECT_RECV_ID_CLIENT_DATA: SIMCONNECT_RECV_ID = 16;
pub const SIMCONNECT_RECV_ID_EVENT_WEATHER_MODE: SIMCONNECT_RECV_ID = 17;
pub const SIMCONNECT_RECV_ID_AIRPORT_LIST: SIMCONNECT_RECV_ID = 18;
pub const SIMCONNECT_RECV_ID_VOR_LIST: SIMCONNECT_RECV_ID = 19;
pub const SIMCONNECT_RECV_ID_NDB_LIST: SIMCONNECT_RECV_ID = 20;
pub const SIMCONNECT_RECV_ID_WAYPOINT_LIST: SIMCONNECT_RECV_ID = 21;
pub const SIMCONNECT_RECV_ID_EVENT_MULTIPLAYER_SERVER_STARTED: SIMCONNECT_RECV_ID = 22;
pub const SIMCONNECT_RECV_ID_EVENT_MULTIPLAYER_CLIENT_STARTED: SIMCONNECT_RECV_ID = 23;
pub const SIMCONNECT_RECV_ID_EVENT_MULTIPLAYER_SESSION_ENDED: SIMCONNECT_RECV_ID = 24;
pub const SIMCONNECT_RECV_ID_EVENT_RACE_END: SIMCONNECT_RECV_ID = 25;
pub const SIMCONNECT_RECV_ID_EVENT_RACE_LAP: SIMCONNECT_RECV_ID = 26;
pub const SIMCONNECT_RECV_ID_EVENT_EX1: SIMCONNECT_RECV_ID = 27;
pub const SIMCONNECT_RECV_ID_FACILITY_DATA: SIMCONNECT_RECV_ID = 28;
pub const SIMCONNECT_RECV_ID_FACILITY_DATA_END: SIMCONNECT_RECV_ID = 29;
pub const SIMCONNECT_RECV_ID_FACILITY_MINIMAL_LIST: SIMCONNECT_RECV_ID = 30;
pub const SIMCONNECT_RECV_ID_JETWAY_DATA: SIMCONNECT_RECV_ID = 31;
pub const SIMCONNECT_RECV_ID_CONTROLLERS_LIST: SIMCONNECT_RECV_ID = 32;
pub const SIMCONNECT_RECV_ID_ACTION_CALLBACK: SIMCONNECT_RECV_ID = 33;
pub const SIMCONNECT_RECV_ID_ENUMERATE_INPUT_EVENTS: SIMCONNECT_RECV_ID = 34;
pub const SIMCONNECT_RECV_ID_GET_INPUT_EVENT: SIMCONNECT_RECV_ID = 35;
pub const SIMCONNECT_RECV_ID_SUBSCRIBE_INPUT_EVENT: SIMCONNECT_RECV_ID = 36;
pub const SIMCONNECT_RECV_ID_ENUMERATE_INPUT_EVENT_PARAMS: SIMCONNECT_RECV_ID = 37;
pub type SIMCONNECT_RECV_ID = ::std::os::raw::c_int;
pub const SIMCONNECT_DATATYPE_INVALID: SIMCONNECT_DATATYPE = 0;
pub const SIMCONNECT_DATATYPE_INT32: SIMCONNECT_DATATYPE = 1;
pub const SIMCONNECT_DATATYPE_INT64: SIMCONNECT_DATATYPE = 2;
pub const SIMCONNECT_DATATYPE_FLOAT32: SIMCONNECT_DATATYPE = 3;
pub const SIMCONNECT_DATATYPE_FLOAT64: SIMCONNECT_DATATYPE = 4;
pub const SIMCONNECT_DATATYPE_STRING8: SIMCONNECT_DATATYPE = 5;
pub const SIMCONNECT_DATATYPE_STRING32: SIMCONNECT_DATATYPE = 6;
pub const SIMCONNECT_DATATYPE_STRING64: SIMCONNECT_DATATYPE = 7;
pub const SIMCONNECT_DATATYPE_STRING128: SIMCONNECT_DATATYPE = 8;
pub const SIMCONNECT_DATATYPE_STRING256: SIMCONNECT_DATATYPE = 9;
pub const SIMCONNECT_DATATYPE_STRING260: SIMCONNECT_DATATYPE = 10;
pub const SIMCONNECT_DATATYPE_STRINGV: SIMCONNECT_DATATYPE = 11;
pub const SIMCONNECT_DATATYPE_INITPOSITION: SIMCONNECT_DATATYPE = 12;
pub const SIMCONNECT_DATATYPE_MARKERSTATE: SIMCONNECT_DATATYPE = 13;
pub const SIMCONNECT_DATATYPE_WAYPOINT: SIMCONNECT_DATATYPE = 14;
pub const SIMCONNECT_DATATYPE_LATLONALT: SIMCONNECT_DATATYPE = 15;
pub const SIMCONNECT_DATATYPE_XYZ: SIMCONNECT_DATATYPE = 16;
pub const SIMCONNECT_DATATYPE_MAX: SIMCONNECT_DATATYPE = 17;
pub type SIMCONNECT_DATATYPE = ::std::os::raw::c_int;
pub const SIMCONNECT_EXCEPTION_NONE: SIMCONNECT_EXCEPTION = 0;
pub const SIMCONNECT_EXCEPTION_ERROR: SIMCONNECT_EXCEPTION = 1;
pub const SIMCONNECT_EXCEPTION_SIZE_MISMATCH: SIMCONNECT_EXCEPTION = 2;
pub const SIMCONNECT_EXCEPTION_UNRECOGNIZED_ID: SIMCONNECT_EXCEPTION = 3;
pub const SIMCONNECT_EXCEPTION_UNOPENED: SIMCONNECT_EXCEPTION = 4;
pub const SIMCONNECT_EXCEPTION_VERSION_MISMATCH: SIMCONNECT_EXCEPTION = 5;
pub const SIMCONNECT_EXCEPTION_TOO_MANY_GROUPS: SIMCONNECT_EXCEPTION = 6;
pub const SIMCONNECT_EXCEPTION_NAME_UNRECOGNIZED: SIMCONNECT_EXCEPTION = 7;
pub const SIMCONNECT_EXCEPTION_TOO_MANY_EVENT_NAMES: SIMCONNECT_EXCEPTION = 8;
pub const SIMCONNECT_EXCEPTION_EVENT_ID_DUPLICATE: SIMCONNECT_EXCEPTION = 9;
pub const SIMCONNECT_EXCEPTION_TOO_MANY_MAPS: SIMCONNECT_EXCEPTION = 10;
pub const SIMCONNECT_EXCEPTION_TOO_MANY_OBJECTS: SIMCONNECT_EXCEPTION = 11;
pub const SIMCONNECT_EXCEPTION_TOO_MANY_REQUESTS: SIMCONNECT_EXCEPTION = 12;
pub const SIMCONNECT_EXCEPTION_WEATHER_INVALID_PORT: SIMCONNECT_EXCEPTION = 13;
pub const SIMCONNECT_EXCEPTION_WEATHER_INVALID_METAR: SIMCONNECT_EXCEPTION = 14;
pub const SIMCONNECT_EXCEPTION_WEATHER_UNABLE_TO_GET_OBSERVATION: SIMCONNECT_EXCEPTION = 15;
pub const SIMCONNECT_EXCEPTION_WEATHER_UNABLE_TO_CREATE_STATION: SIMCONNECT_EXCEPTION = 16;
pub const SIMCONNECT_EXCEPTION_WEATHER_UNABLE_TO_REMOVE_STATION: SIMCONNECT_EXCEPTION = 17;
pub const SIMCONNECT_EXCEPTION_INVALID_DATA_TYPE: SIMCONNECT_EXCEPTION = 18;
pub const SIMCONNECT_EXCEPTION_INVALID_DATA_SIZE: SIMCONNECT_EXCEPTION = 19;
pub const SIMCONNECT_EXCEPTION_DATA_ERROR: SIMCONNECT_EXCEPTION = 20;
pub const SIMCONNECT_EXCEPTION_INVALID_ARRAY: SIMCONNECT_EXCEPTION = 21;
pub const SIMCONNECT_EXCEPTION_CREATE_OBJECT_FAILED: SIMCONNECT_EXCEPTION = 22;
pub const SIMCONNECT_EXCEPTION_LOAD_FLIGHTPLAN_FAILED: SIMCONNECT_EXCEPTION = 23;
pub const SIMCONNECT_EXCEPTION_OPERATION_INVALID_FOR_OBJECT_TYPE: SIMCONNECT_EXCEPTION = 24;
pub const SIMCONNECT_EXCEPTION_ILLEGAL_OPERATION: SIMCONNECT_EXCEPTION = 25;
pub const SIMCONNECT_EXCEPTION_ALREADY_SUBSCRIBED: SIMCONNECT_EXCEPTION = 26;
pub const SIMCONNECT_EXCEPTION_INVALID_ENUM: SIMCONNECT_EXCEPTION = 27;
pub const SIMCONNECT_EXCEPTION_DEFINITION_ERROR: SIMCONNECT_EXCEPTION = 28;
pub const SIMCONNECT_EXCEPTION_DUPLICATE_ID: SIMCONNECT_EXCEPTION = 29;
pub const SIMCONNECT_EXCEPTION_DATUM_ID: SIMCONNECT_EXCEPTION = 30;
pub const SIMCONNECT_EXCEPTION_OUT_OF_BOUNDS: SIMCONNECT_EXCEPTION = 31;
pub const SIMCONNECT_EXCEPTION_ALREADY_CREATED: SIMCONNECT_EXCEPTION = 32;
pub const SIMCONNECT_EXCEPTION_OBJECT_OUTSIDE_REALITY_BUBBLE: SIMCONNECT_EXCEPTION = 33;
pub const SIMCONNECT_EXCEPTION_OBJECT_CONTAINER: SIMCONNECT_EXCEPTION = 34;
pub const SIMCONNECT_EXCEPTION_OBJECT_AI: SIMCONNECT_EXCEPTION = 35;
pub const SIMCONNECT_EXCEPTION_OBJECT_ATC: SIMCONNECT_EXCEPTION = 36;
pub const SIMCONNECT_EXCEPTION_OBJECT_SCHEDULE: SIMCONNECT_EXCEPTION = 37;
pub const SIMCONNECT_EXCEPTION_JETWAY_DATA: SIMCONNECT_EXCEPTION = 38;
pub const SIMCONNECT_EXCEPTION_ACTION_NOT_FOUND: SIMCONNECT_EXCEPTION = 39;
pub const SIMCONNECT_EXCEPTION_NOT_AN_ACTION: SIMCONNECT_EXCEPTION = 40;
pub const SIMCONNECT_EXCEPTION_INCORRECT_ACTION_PARAMS: SIMCONNECT_EXCEPTION = 41;
pub const SIMCONNECT_EXCEPTION_GET_INPUT_EVENT_FAILED: SIMCONNECT_EXCEPTION = 42;
pub const SIMCONNECT_EXCEPTION_SET_INPUT_EVENT_FAILED: SIMCONNECT_EXCEPTION = 43;
pub type SIMCONNECT_EXCEPTION = ::std::os::raw::c_int;
pub const SIMCONNECT_SIMOBJECT_TYPE_USER: SIMCONNECT_SIMOBJECT_TYPE = 0;
pub const SIMCONNECT_SIMOBJECT_TYPE_ALL: SIMCONNECT_SIMOBJECT_TYPE = 1;
pub const SIMCONNECT_SIMOBJECT_TYPE_AIRCRAFT: SIMCONNECT_SIMOBJECT_TYPE = 2;
pub const SIMCONNECT_SIMOBJECT_TYPE_HELICOPTER: SIMCONNECT_SIMOBJECT_TYPE = 3;
pub const SIMCONNECT_SIMOBJECT_TYPE_BOAT: SIMCONNECT_SIMOBJECT_TYPE = 4;
pub const SIMCONNECT_SIMOBJECT_TYPE_GROUND: SIMCONNECT_SIMOBJECT_TYPE = 5;
pub type SIMCONNECT_SIMOBJECT_TYPE = ::std::os::raw::c_int;
pub const SIMCONNECT_STATE_OFF: SIMCONNECT_STATE = 0;
pub const SIMCONNECT_STATE_ON: SIMCONNECT_STATE = 1;
pub type SIMCONNECT_STATE = ::std::os::raw::c_int;
pub const SIMCONNECT_PERIOD_NEVER: SIMCONNECT_PERIOD = 0;
pub const SIMCONNECT_PERIOD_ONCE: SIMCONNECT_PERIOD = 1;
pub const SIMCONNECT_PERIOD_VISUAL_FRAME: SIMCONNECT_PERIOD = 2;
pub const SIMCONNECT_PERIOD_SIM_FRAME: SIMCONNECT_PERIOD = 3;
pub const SIMCONNECT_PERIOD_SECOND: SIMCONNECT_PERIOD = 4;
pub type SIMCONNECT_PERIOD = ::std::os::raw::c_int;
pub const SIMCONNECT_MISSION_FAILED: SIMCONNECT_MISSION_END = 0;
pub const SIMCONNECT_MISSION_CRASHED: SIMCONNECT_MISSION_END = 1;
pub const SIMCONNECT_MISSION_SUCCEEDED: SIMCONNECT_MISSION_END = 2;
pub type SIMCONNECT_MISSION_END = ::std::os::raw::c_int;
pub const SIMCONNECT_CLIENT_DATA_PERIOD_NEVER: SIMCONNECT_CLIENT_DATA_PERIOD = 0;
pub const SIMCONNECT_CLIENT_DATA_PERIOD_ONCE: SIMCONNECT_CLIENT_DATA_PERIOD = 1;
pub const SIMCONNECT_CLIENT_DATA_PERIOD_VISUAL_FRAME: SIMCONNECT_CLIENT_DATA_PERIOD = 2;
pub const SIMCONNECT_CLIENT_DATA_PERIOD_ON_SET: SIMCONNECT_CLIENT_DATA_PERIOD = 3;
pub const SIMCONNECT_CLIENT_DATA_PERIOD_SECOND: SIMCONNECT_CLIENT_DATA_PERIOD = 4;
pub type SIMCONNECT_CLIENT_DATA_PERIOD = ::std::os::raw::c_int;
pub const SIMCONNECT_TEXT_TYPE_SCROLL_BLACK: SIMCONNECT_TEXT_TYPE = 0;
pub const SIMCONNECT_TEXT_TYPE_SCROLL_WHITE: SIMCONNECT_TEXT_TYPE = 1;
pub const SIMCONNECT_TEXT_TYPE_SCROLL_RED: SIMCONNECT_TEXT_TYPE = 2;
pub const SIMCONNECT_TEXT_TYPE_SCROLL_GREEN: SIMCONNECT_TEXT_TYPE = 3;
pub const SIMCONNECT_TEXT_TYPE_SCROLL_BLUE: SIMCONNECT_TEXT_TYPE = 4;
pub const SIMCONNECT_TEXT_TYPE_SCROLL_YELLOW: SIMCONNECT_TEXT_TYPE = 5;
pub const SIMCONNECT_TEXT_TYPE_SCROLL_MAGENTA: SIMCONNECT_TEXT_TYPE = 6;
pub const SIMCONNECT_TEXT_TYPE_SCROLL_CYAN: SIMCONNECT_TEXT_TYPE = 7;
pub const SIMCONNECT_TEXT_TYPE_PRINT_BLACK: SIMCONNECT_TEXT_TYPE = 256;
pub const SIMCONNECT_TEXT_TYPE_PRINT_WHITE: SIMCONNECT_TEXT_TYPE = 257;
pub const SIMCONNECT_TEXT_TYPE_PRINT_RED: SIMCONNECT_TEXT_TYPE = 258;
pub const SIMCONNECT_TEXT_TYPE_PRINT_GREEN: SIMCONNECT_TEXT_TYPE = 259;
pub const SIMCONNECT_TEXT_TYPE_PRINT_BLUE: SIMCONNECT_TEXT_TYPE = 260;
pub const SIMCONNECT_TEXT_TYPE_PRINT_YELLOW: SIMCONNECT_TEXT_TYPE = 261;
pub const SIMCONNECT_TEXT_TYPE_PRINT_MAGENTA: SIMCONNECT_TEXT_TYPE = 262;
pub const SIMCONNECT_TEXT_TYPE_PRINT_CYAN: SIMCONNECT_TEXT_TYPE = 263;
pub const SIMCONNECT_TEXT_TYPE_MENU: SIMCONNECT_TEXT_TYPE = 512;
pub type SIMCONNECT_TEXT_TYPE = ::std::os::raw::c_int;
pub const SIMCONNECT_TEXT_RESULT_MENU_SELECT_1: SIMCONNECT_TEXT_RESULT = 0;
pub const SIMCONNECT_TEXT_RESULT_MENU_SELECT_2: SIMCONNECT_TEXT_RESULT = 1;
pub const SIMCONNECT_TEXT_RESULT_MENU_SELECT_3: SIMCONNECT_TEXT_RESULT = 2;
pub const SIMCONNECT_TEXT_RESULT_MENU_SELECT_4: SIMCONNECT_TEXT_RESULT = 3;
pub const SIMCONNECT_TEXT_RESULT_MENU_SELECT_5: SIMCONNECT_TEXT_RESULT = 4;
pub const SIMCONNECT_TEXT_RESULT_MENU_SELECT_6: SIMCONNECT_TEXT_RESULT = 5;
pub const SIMCONNECT_TEXT_RESULT_MENU_SELECT_7: SIMCONNECT_TEXT_RESULT = 6;
pub const SIMCONNECT_TEXT_RESULT_MENU_SELECT_8: SIMCONNECT_TEXT_RESULT = 7;
pub const SIMCONNECT_TEXT_RESULT_MENU_SELECT_9: SIMCONNECT_TEXT_RESULT = 8;
pub const SIMCONNECT_TEXT_RESULT_MENU_SELECT_10: SIMCONNECT_TEXT_RESULT = 9;
pub const SIMCONNECT_TEXT_RESULT_DISPLAYED: SIMCONNECT_TEXT_RESULT = 65536;
pub const SIMCONNECT_TEXT_RESULT_QUEUED: SIMCONNECT_TEXT_RESULT = 65537;
pub const SIMCONNECT_TEXT_RESULT_REMOVED: SIMCONNECT_TEXT_RESULT = 65538;
pub const SIMCONNECT_TEXT_RESULT_REPLACED: SIMCONNECT_TEXT_RESULT = 65539;
pub const SIMCONNECT_TEXT_RESULT_TIMEOUT: SIMCONNECT_TEXT_RESULT = 65540;
pub type SIMCONNECT_TEXT_RESULT = ::std::os::raw::c_int;
pub const SIMCONNECT_WEATHER_MODE_THEME: SIMCONNECT_WEATHER_MODE = 0;
pub const SIMCONNECT_WEATHER_MODE_RWW: SIMCONNECT_WEATHER_MODE = 1;
pub const SIMCONNECT_WEATHER_MODE_CUSTOM: SIMCONNECT_WEATHER_MODE = 2;
pub const SIMCONNECT_WEATHER_MODE_GLOBAL: SIMCONNECT_WEATHER_MODE = 3;
pub type SIMCONNECT_WEATHER_MODE = ::std::os::raw::c_int;
pub const SIMCONNECT_FACILITY_LIST_TYPE_AIRPORT: SIMCONNECT_FACILITY_LIST_TYPE = 0;
pub const SIMCONNECT_FACILITY_LIST_TYPE_WAYPOINT: SIMCONNECT_FACILITY_LIST_TYPE = 1;
pub const SIMCONNECT_FACILITY_LIST_TYPE_NDB: SIMCONNECT_FACILITY_LIST_TYPE = 2;
pub const SIMCONNECT_FACILITY_LIST_TYPE_VOR: SIMCONNECT_FACILITY_LIST_TYPE = 3;
pub const SIMCONNECT_FACILITY_LIST_TYPE_COUNT: SIMCONNECT_FACILITY_LIST_TYPE = 4;
pub type SIMCONNECT_FACILITY_LIST_TYPE = ::std::os::raw::c_int;
pub const SIMCONNECT_FACILITY_DATA_AIRPORT: SIMCONNECT_FACILITY_DATA_TYPE = 0;
pub const SIMCONNECT_FACILITY_DATA_RUNWAY: SIMCONNECT_FACILITY_DATA_TYPE = 1;
pub const SIMCONNECT_FACILITY_DATA_START: SIMCONNECT_FACILITY_DATA_TYPE = 2;
pub const SIMCONNECT_FACILITY_DATA_FREQUENCY: SIMCONNECT_FACILITY_DATA_TYPE = 3;
pub const SIMCONNECT_FACILITY_DATA_HELIPAD: SIMCONNECT_FACILITY_DATA_TYPE = 4;
pub const SIMCONNECT_FACILITY_DATA_APPROACH: SIMCONNECT_FACILITY_DATA_TYPE = 5;
pub const SIMCONNECT_FACILITY_DATA_APPROACH_TRANSITION: SIMCONNECT_FACILITY_DATA_TYPE = 6;
pub const SIMCONNECT_FACILITY_DATA_APPROACH_LEG: SIMCONNECT_FACILITY_DATA_TYPE = 7;
pub const SIMCONNECT_FACILITY_DATA_FINAL_APPROACH_LEG: SIMCONNECT_FACILITY_DATA_TYPE = 8;
pub const SIMCONNECT_FACILITY_DATA_MISSED_APPROACH_LEG: SIMCONNECT_FACILITY_DATA_TYPE = 9;
pub const SIMCONNECT_FACILITY_DATA_DEPARTURE: SIMCONNECT_FACILITY_DATA_TYPE = 10;
pub const SIMCONNECT_FACILITY_DATA_ARRIVAL: SIMCONNECT_FACILITY_DATA_TYPE = 11;
pub const SIMCONNECT_FACILITY_DATA_RUNWAY_TRANSITION: SIMCONNECT_FACILITY_DATA_TYPE = 12;
pub const SIMCONNECT_FACILITY_DATA_ENROUTE_TRANSITION: SIMCONNECT_FACILITY_DATA_TYPE = 13;
pub const SIMCONNECT_FACILITY_DATA_TAXI_POINT: SIMCONNECT_FACILITY_DATA_TYPE = 14;
pub const SIMCONNECT_FACILITY_DATA_TAXI_PARKING: SIMCONNECT_FACILITY_DATA_TYPE = 15;
pub const SIMCONNECT_FACILITY_DATA_TAXI_PATH: SIMCONNECT_FACILITY_DATA_TYPE = 16;
pub const SIMCONNECT_FACILITY_DATA_TAXI_NAME: SIMCONNECT_FACILITY_DATA_TYPE = 17;
pub const SIMCONNECT_FACILITY_DATA_JETWAY: SIMCONNECT_FACILITY_DATA_TYPE = 18;
pub const SIMCONNECT_FACILITY_DATA_VOR: SIMCONNECT_FACILITY_DATA_TYPE = 19;
pub const SIMCONNECT_FACILITY_DATA_NDB: SIMCONNECT_FACILITY_DATA_TYPE = 20;
pub const SIMCONNECT_FACILITY_DATA_WAYPOINT: SIMCONNECT_FACILITY_DATA_TYPE = 21;
pub const SIMCONNECT_FACILITY_DATA_ROUTE: SIMCONNECT_FACILITY_DATA_TYPE = 22;
pub const SIMCONNECT_FACILITY_DATA_PAVEMENT: SIMCONNECT_FACILITY_DATA_TYPE = 23;
pub const SIMCONNECT_FACILITY_DATA_APPROACH_LIGHTS: SIMCONNECT_FACILITY_DATA_TYPE = 24;
pub const SIMCONNECT_FACILITY_DATA_VASI: SIMCONNECT_FACILITY_DATA_TYPE = 25;
pub type SIMCONNECT_FACILITY_DATA_TYPE = ::std::os::raw::c_int;
pub const SIMCONNECT_INPUT_EVENT_TYPE_DOUBLE: SIMCONNECT_INPUT_EVENT_TYPE = 0;
pub const SIMCONNECT_INPUT_EVENT_TYPE_STRING: SIMCONNECT_INPUT_EVENT_TYPE = 1;
pub type SIMCONNECT_INPUT_EVENT_TYPE = DWORD;
pub type SIMCONNECT_VOR_FLAGS = DWORD;
pub type SIMCONNECT_WAYPOINT_FLAGS = DWORD;
pub type SIMCONNECT_EVENT_FLAG = DWORD;
pub type SIMCONNECT_DATA_REQUEST_FLAG = DWORD;
pub type SIMCONNECT_DATA_SET_FLAG = DWORD;
pub type SIMCONNECT_CREATE_CLIENT_DATA_FLAG = DWORD;
pub type SIMCONNECT_CLIENT_DATA_REQUEST_FLAG = DWORD;
pub type SIMCONNECT_CLIENT_DATA_SET_FLAG = DWORD;
pub type SIMCONNECT_VIEW_SYSTEM_EVENT_DATA = DWORD;
pub type SIMCONNECT_SOUND_SYSTEM_EVENT_DATA = DWORD;
pub type SIMCONNECT_NOTIFICATION_GROUP_ID = DWORD;
pub type SIMCONNECT_INPUT_GROUP_ID = DWORD;
pub type SIMCONNECT_DATA_DEFINITION_ID = DWORD;
pub type SIMCONNECT_DATA_REQUEST_ID = DWORD;
pub type SIMCONNECT_CLIENT_EVENT_ID = DWORD;
pub type SIMCONNECT_CLIENT_DATA_ID = DWORD;
pub type SIMCONNECT_CLIENT_DATA_DEFINITION_ID = DWORD;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV {
    pub dwSize: DWORD,
    pub dwVersion: DWORD,
    pub dwID: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV"][::std::mem::size_of::<SIMCONNECT_RECV>() - 12usize];
    ["Alignment of SIMCONNECT_RECV"][::std::mem::align_of::<SIMCONNECT_RECV>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV::dwSize"]
        [::std::mem::offset_of!(SIMCONNECT_RECV, dwSize) - 0usize];
    ["Offset of field: SIMCONNECT_RECV::dwVersion"]
        [::std::mem::offset_of!(SIMCONNECT_RECV, dwVersion) - 4usize];
    ["Offset of field: SIMCONNECT_RECV::dwID"]
        [::std::mem::offset_of!(SIMCONNECT_RECV, dwID) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_EXCEPTION {
    pub dwSize: DWORD,
    pub dwVersion: DWORD,
    pub dwID: DWORD,
    pub dwException: DWORD,
    pub dwSendID: DWORD,
    pub dwIndex: DWORD,
}
pub const SIMCONNECT_RECV_EXCEPTION_UNKNOWN_SENDID: DWORD = 0;
pub const SIMCONNECT_RECV_EXCEPTION_UNKNOWN_INDEX: DWORD = 4294967295;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_EXCEPTION"]
        [::std::mem::size_of::<SIMCONNECT_RECV_EXCEPTION>() - 24usize];
    // ["Alignment of SIMCONNECT_RECV_EXCEPTION"]
    //     [::std::mem::align_of::<SIMCONNECT_RECV_EXCEPTION>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV_EXCEPTION::dwException"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_EXCEPTION, dwException) - 12usize];
    ["Offset of field: SIMCONNECT_RECV_EXCEPTION::dwSendID"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_EXCEPTION, dwSendID) - 16usize];
    ["Offset of field: SIMCONNECT_RECV_EXCEPTION::dwIndex"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_EXCEPTION, dwIndex) - 20usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_OPEN {
    pub _base: SIMCONNECT_RECV,
    pub szApplicationName: [::std::os::raw::c_char; 256usize],
    pub dwApplicationVersionMajor: DWORD,
    pub dwApplicationVersionMinor: DWORD,
    pub dwApplicationBuildMajor: DWORD,
    pub dwApplicationBuildMinor: DWORD,
    pub dwSimConnectVersionMajor: DWORD,
    pub dwSimConnectVersionMinor: DWORD,
    pub dwSimConnectBuildMajor: DWORD,
    pub dwSimConnectBuildMinor: DWORD,
    pub dwReserved1: DWORD,
    pub dwReserved2: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_OPEN"][::std::mem::size_of::<SIMCONNECT_RECV_OPEN>() - 308usize];
    ["Alignment of SIMCONNECT_RECV_OPEN"][::std::mem::align_of::<SIMCONNECT_RECV_OPEN>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV_OPEN::szApplicationName"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_OPEN, szApplicationName) - 12usize];
    ["Offset of field: SIMCONNECT_RECV_OPEN::dwApplicationVersionMajor"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_OPEN, dwApplicationVersionMajor) - 268usize];
    ["Offset of field: SIMCONNECT_RECV_OPEN::dwApplicationVersionMinor"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_OPEN, dwApplicationVersionMinor) - 272usize];
    ["Offset of field: SIMCONNECT_RECV_OPEN::dwApplicationBuildMajor"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_OPEN, dwApplicationBuildMajor) - 276usize];
    ["Offset of field: SIMCONNECT_RECV_OPEN::dwApplicationBuildMinor"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_OPEN, dwApplicationBuildMinor) - 280usize];
    ["Offset of field: SIMCONNECT_RECV_OPEN::dwSimConnectVersionMajor"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_OPEN, dwSimConnectVersionMajor) - 284usize];
    ["Offset of field: SIMCONNECT_RECV_OPEN::dwSimConnectVersionMinor"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_OPEN, dwSimConnectVersionMinor) - 288usize];
    ["Offset of field: SIMCONNECT_RECV_OPEN::dwSimConnectBuildMajor"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_OPEN, dwSimConnectBuildMajor) - 292usize];
    ["Offset of field: SIMCONNECT_RECV_OPEN::dwSimConnectBuildMinor"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_OPEN, dwSimConnectBuildMinor) - 296usize];
    ["Offset of field: SIMCONNECT_RECV_OPEN::dwReserved1"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_OPEN, dwReserved1) - 300usize];
    ["Offset of field: SIMCONNECT_RECV_OPEN::dwReserved2"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_OPEN, dwReserved2) - 304usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_QUIT {
    pub _base: SIMCONNECT_RECV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_QUIT"][::std::mem::size_of::<SIMCONNECT_RECV_QUIT>() - 12usize];
    ["Alignment of SIMCONNECT_RECV_QUIT"][::std::mem::align_of::<SIMCONNECT_RECV_QUIT>() - 1usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_EVENT {
    pub _base: SIMCONNECT_RECV,
    pub uGroupID: DWORD,
    pub uEventID: DWORD,
    pub dwData: DWORD,
}
pub const SIMCONNECT_RECV_EVENT_UNKNOWN_GROUP: DWORD = 4294967295;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_EVENT"][::std::mem::size_of::<SIMCONNECT_RECV_EVENT>() - 24usize];
    ["Alignment of SIMCONNECT_RECV_EVENT"]
        [::std::mem::align_of::<SIMCONNECT_RECV_EVENT>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV_EVENT::uGroupID"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_EVENT, uGroupID) - 12usize];
    ["Offset of field: SIMCONNECT_RECV_EVENT::uEventID"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_EVENT, uEventID) - 16usize];
    ["Offset of field: SIMCONNECT_RECV_EVENT::dwData"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_EVENT, dwData) - 20usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_EVENT_FILENAME {
    pub _base: SIMCONNECT_RECV_EVENT,
    pub szFileName: [::std::os::raw::c_char; 260usize],
    pub dwFlags: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_EVENT_FILENAME"]
        [::std::mem::size_of::<SIMCONNECT_RECV_EVENT_FILENAME>() - 288usize];
    ["Alignment of SIMCONNECT_RECV_EVENT_FILENAME"]
        [::std::mem::align_of::<SIMCONNECT_RECV_EVENT_FILENAME>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV_EVENT_FILENAME::szFileName"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_EVENT_FILENAME, szFileName) - 24usize];
    ["Offset of field: SIMCONNECT_RECV_EVENT_FILENAME::dwFlags"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_EVENT_FILENAME, dwFlags) - 284usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_EVENT_OBJECT_ADDREMOVE {
    pub _base: SIMCONNECT_RECV_EVENT,
    pub eObjType: SIMCONNECT_SIMOBJECT_TYPE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_EVENT_OBJECT_ADDREMOVE"]
        [::std::mem::size_of::<SIMCONNECT_RECV_EVENT_OBJECT_ADDREMOVE>() - 28usize];
    ["Alignment of SIMCONNECT_RECV_EVENT_OBJECT_ADDREMOVE"]
        [::std::mem::align_of::<SIMCONNECT_RECV_EVENT_OBJECT_ADDREMOVE>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV_EVENT_OBJECT_ADDREMOVE::eObjType"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_EVENT_OBJECT_ADDREMOVE, eObjType) - 24usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_EVENT_FRAME {
    pub _base: SIMCONNECT_RECV_EVENT,
    pub fFrameRate: f32,
    pub fSimSpeed: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_EVENT_FRAME"]
        [::std::mem::size_of::<SIMCONNECT_RECV_EVENT_FRAME>() - 32usize];
    ["Alignment of SIMCONNECT_RECV_EVENT_FRAME"]
        [::std::mem::align_of::<SIMCONNECT_RECV_EVENT_FRAME>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV_EVENT_FRAME::fFrameRate"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_EVENT_FRAME, fFrameRate) - 24usize];
    ["Offset of field: SIMCONNECT_RECV_EVENT_FRAME::fSimSpeed"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_EVENT_FRAME, fSimSpeed) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_EVENT_MULTIPLAYER_SERVER_STARTED {
    pub _base: SIMCONNECT_RECV_EVENT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_EVENT_MULTIPLAYER_SERVER_STARTED"]
        [::std::mem::size_of::<SIMCONNECT_RECV_EVENT_MULTIPLAYER_SERVER_STARTED>() - 24usize];
    ["Alignment of SIMCONNECT_RECV_EVENT_MULTIPLAYER_SERVER_STARTED"]
        [::std::mem::align_of::<SIMCONNECT_RECV_EVENT_MULTIPLAYER_SERVER_STARTED>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_EVENT_MULTIPLAYER_CLIENT_STARTED {
    pub _base: SIMCONNECT_RECV_EVENT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_EVENT_MULTIPLAYER_CLIENT_STARTED"]
        [::std::mem::size_of::<SIMCONNECT_RECV_EVENT_MULTIPLAYER_CLIENT_STARTED>() - 24usize];
    ["Alignment of SIMCONNECT_RECV_EVENT_MULTIPLAYER_CLIENT_STARTED"]
        [::std::mem::align_of::<SIMCONNECT_RECV_EVENT_MULTIPLAYER_CLIENT_STARTED>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_EVENT_MULTIPLAYER_SESSION_ENDED {
    pub _base: SIMCONNECT_RECV_EVENT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_EVENT_MULTIPLAYER_SESSION_ENDED"]
        [::std::mem::size_of::<SIMCONNECT_RECV_EVENT_MULTIPLAYER_SESSION_ENDED>() - 24usize];
    ["Alignment of SIMCONNECT_RECV_EVENT_MULTIPLAYER_SESSION_ENDED"]
        [::std::mem::align_of::<SIMCONNECT_RECV_EVENT_MULTIPLAYER_SESSION_ENDED>() - 1usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_EVENT_EX1 {
    pub _base: SIMCONNECT_RECV,
    pub uGroupID: DWORD,
    pub uEventID: DWORD,
    pub dwData0: DWORD,
    pub dwData1: DWORD,
    pub dwData2: DWORD,
    pub dwData3: DWORD,
    pub dwData4: DWORD,
}
pub const SIMCONNECT_RECV_EVENT_EX1_UNKNOWN_GROUP: DWORD = 4294967295;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_EVENT_EX1"]
        [::std::mem::size_of::<SIMCONNECT_RECV_EVENT_EX1>() - 40usize];
    ["Alignment of SIMCONNECT_RECV_EVENT_EX1"]
        [::std::mem::align_of::<SIMCONNECT_RECV_EVENT_EX1>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV_EVENT_EX1::uGroupID"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_EVENT_EX1, uGroupID) - 12usize];
    ["Offset of field: SIMCONNECT_RECV_EVENT_EX1::uEventID"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_EVENT_EX1, uEventID) - 16usize];
    ["Offset of field: SIMCONNECT_RECV_EVENT_EX1::dwData0"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_EVENT_EX1, dwData0) - 20usize];
    ["Offset of field: SIMCONNECT_RECV_EVENT_EX1::dwData1"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_EVENT_EX1, dwData1) - 24usize];
    ["Offset of field: SIMCONNECT_RECV_EVENT_EX1::dwData2"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_EVENT_EX1, dwData2) - 28usize];
    ["Offset of field: SIMCONNECT_RECV_EVENT_EX1::dwData3"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_EVENT_EX1, dwData3) - 32usize];
    ["Offset of field: SIMCONNECT_RECV_EVENT_EX1::dwData4"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_EVENT_EX1, dwData4) - 36usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_DATA_RACE_RESULT {
    pub dwNumberOfRacers: DWORD,
    pub MissionGUID: GUID,
    pub szPlayerName: [::std::os::raw::c_char; 260usize],
    pub szSessionType: [::std::os::raw::c_char; 260usize],
    pub szAircraft: [::std::os::raw::c_char; 260usize],
    pub szPlayerRole: [::std::os::raw::c_char; 260usize],
    pub fTotalTime: f64,
    pub fPenaltyTime: f64,
    pub dwIsDisqualified: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_DATA_RACE_RESULT"]
        [::std::mem::size_of::<SIMCONNECT_DATA_RACE_RESULT>() - 1080usize];
    ["Alignment of SIMCONNECT_DATA_RACE_RESULT"]
        [::std::mem::align_of::<SIMCONNECT_DATA_RACE_RESULT>() - 1usize];
    ["Offset of field: SIMCONNECT_DATA_RACE_RESULT::dwNumberOfRacers"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_RACE_RESULT, dwNumberOfRacers) - 0usize];
    ["Offset of field: SIMCONNECT_DATA_RACE_RESULT::MissionGUID"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_RACE_RESULT, MissionGUID) - 4usize];
    ["Offset of field: SIMCONNECT_DATA_RACE_RESULT::szPlayerName"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_RACE_RESULT, szPlayerName) - 20usize];
    ["Offset of field: SIMCONNECT_DATA_RACE_RESULT::szSessionType"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_RACE_RESULT, szSessionType) - 280usize];
    ["Offset of field: SIMCONNECT_DATA_RACE_RESULT::szAircraft"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_RACE_RESULT, szAircraft) - 540usize];
    ["Offset of field: SIMCONNECT_DATA_RACE_RESULT::szPlayerRole"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_RACE_RESULT, szPlayerRole) - 800usize];
    ["Offset of field: SIMCONNECT_DATA_RACE_RESULT::fTotalTime"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_RACE_RESULT, fTotalTime) - 1060usize];
    ["Offset of field: SIMCONNECT_DATA_RACE_RESULT::fPenaltyTime"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_RACE_RESULT, fPenaltyTime) - 1068usize];
    ["Offset of field: SIMCONNECT_DATA_RACE_RESULT::dwIsDisqualified"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_RACE_RESULT, dwIsDisqualified) - 1076usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_EVENT_RACE_END {
    pub _base: SIMCONNECT_RECV_EVENT,
    pub dwRacerNumber: DWORD,
    pub RacerData: SIMCONNECT_DATA_RACE_RESULT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_EVENT_RACE_END"]
        [::std::mem::size_of::<SIMCONNECT_RECV_EVENT_RACE_END>() - 1108usize];
    ["Alignment of SIMCONNECT_RECV_EVENT_RACE_END"]
        [::std::mem::align_of::<SIMCONNECT_RECV_EVENT_RACE_END>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV_EVENT_RACE_END::dwRacerNumber"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_EVENT_RACE_END, dwRacerNumber) - 24usize];
    ["Offset of field: SIMCONNECT_RECV_EVENT_RACE_END::RacerData"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_EVENT_RACE_END, RacerData) - 28usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_EVENT_RACE_LAP {
    pub _base: SIMCONNECT_RECV_EVENT,
    pub dwLapIndex: DWORD,
    pub RacerData: SIMCONNECT_DATA_RACE_RESULT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_EVENT_RACE_LAP"]
        [::std::mem::size_of::<SIMCONNECT_RECV_EVENT_RACE_LAP>() - 1108usize];
    ["Alignment of SIMCONNECT_RECV_EVENT_RACE_LAP"]
        [::std::mem::align_of::<SIMCONNECT_RECV_EVENT_RACE_LAP>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV_EVENT_RACE_LAP::dwLapIndex"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_EVENT_RACE_LAP, dwLapIndex) - 24usize];
    ["Offset of field: SIMCONNECT_RECV_EVENT_RACE_LAP::RacerData"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_EVENT_RACE_LAP, RacerData) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_SIMOBJECT_DATA {
    pub dwSize: DWORD,
    pub dwVersion: DWORD,
    pub dwID: DWORD,
    pub dwRequestID: DWORD,
    pub dwObjectID: DWORD,
    pub dwDefineID: DWORD,
    pub dwFlags: DWORD,
    pub dwentrynumber: DWORD,
    pub dwoutof: DWORD,
    pub dwDefineCount: DWORD,
    pub dwData: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_SIMOBJECT_DATA"]
        [::std::mem::size_of::<SIMCONNECT_RECV_SIMOBJECT_DATA>() - 44usize];
    // ["Alignment of SIMCONNECT_RECV_SIMOBJECT_DATA"]
    //     [::std::mem::align_of::<SIMCONNECT_RECV_SIMOBJECT_DATA>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV_SIMOBJECT_DATA::dwRequestID"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_SIMOBJECT_DATA, dwRequestID) - 12usize];
    ["Offset of field: SIMCONNECT_RECV_SIMOBJECT_DATA::dwObjectID"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_SIMOBJECT_DATA, dwObjectID) - 16usize];
    ["Offset of field: SIMCONNECT_RECV_SIMOBJECT_DATA::dwDefineID"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_SIMOBJECT_DATA, dwDefineID) - 20usize];
    ["Offset of field: SIMCONNECT_RECV_SIMOBJECT_DATA::dwFlags"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_SIMOBJECT_DATA, dwFlags) - 24usize];
    ["Offset of field: SIMCONNECT_RECV_SIMOBJECT_DATA::dwentrynumber"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_SIMOBJECT_DATA, dwentrynumber) - 28usize];
    ["Offset of field: SIMCONNECT_RECV_SIMOBJECT_DATA::dwoutof"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_SIMOBJECT_DATA, dwoutof) - 32usize];
    ["Offset of field: SIMCONNECT_RECV_SIMOBJECT_DATA::dwDefineCount"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_SIMOBJECT_DATA, dwDefineCount) - 36usize];
    ["Offset of field: SIMCONNECT_RECV_SIMOBJECT_DATA::dwData"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_SIMOBJECT_DATA, dwData) - 40usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_SIMOBJECT_DATA_BYTYPE {
    pub _base: SIMCONNECT_RECV_SIMOBJECT_DATA,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_SIMOBJECT_DATA_BYTYPE"]
        [::std::mem::size_of::<SIMCONNECT_RECV_SIMOBJECT_DATA_BYTYPE>() - 44usize];
    ["Alignment of SIMCONNECT_RECV_SIMOBJECT_DATA_BYTYPE"]
        [::std::mem::align_of::<SIMCONNECT_RECV_SIMOBJECT_DATA_BYTYPE>() - 1usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_CLIENT_DATA {
    pub _base: SIMCONNECT_RECV_SIMOBJECT_DATA,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_CLIENT_DATA"]
        [::std::mem::size_of::<SIMCONNECT_RECV_CLIENT_DATA>() - 44usize];
    ["Alignment of SIMCONNECT_RECV_CLIENT_DATA"]
        [::std::mem::align_of::<SIMCONNECT_RECV_CLIENT_DATA>() - 1usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_WEATHER_OBSERVATION {
    pub _base: SIMCONNECT_RECV,
    pub dwRequestID: DWORD,
    pub szMetar: [::std::os::raw::c_char; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_WEATHER_OBSERVATION"]
        [::std::mem::size_of::<SIMCONNECT_RECV_WEATHER_OBSERVATION>() - 17usize];
    ["Alignment of SIMCONNECT_RECV_WEATHER_OBSERVATION"]
        [::std::mem::align_of::<SIMCONNECT_RECV_WEATHER_OBSERVATION>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV_WEATHER_OBSERVATION::dwRequestID"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_WEATHER_OBSERVATION, dwRequestID) - 12usize];
    ["Offset of field: SIMCONNECT_RECV_WEATHER_OBSERVATION::szMetar"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_WEATHER_OBSERVATION, szMetar) - 16usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_CLOUD_STATE {
    pub _base: SIMCONNECT_RECV,
    pub dwRequestID: DWORD,
    pub dwArraySize: DWORD,
    pub rgbData: [BYTE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_CLOUD_STATE"]
        [::std::mem::size_of::<SIMCONNECT_RECV_CLOUD_STATE>() - 21usize];
    ["Alignment of SIMCONNECT_RECV_CLOUD_STATE"]
        [::std::mem::align_of::<SIMCONNECT_RECV_CLOUD_STATE>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV_CLOUD_STATE::dwRequestID"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_CLOUD_STATE, dwRequestID) - 12usize];
    ["Offset of field: SIMCONNECT_RECV_CLOUD_STATE::dwArraySize"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_CLOUD_STATE, dwArraySize) - 16usize];
    ["Offset of field: SIMCONNECT_RECV_CLOUD_STATE::rgbData"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_CLOUD_STATE, rgbData) - 20usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_ASSIGNED_OBJECT_ID {
    pub _base: SIMCONNECT_RECV,
    pub dwRequestID: DWORD,
    pub dwObjectID: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_ASSIGNED_OBJECT_ID"]
        [::std::mem::size_of::<SIMCONNECT_RECV_ASSIGNED_OBJECT_ID>() - 20usize];
    ["Alignment of SIMCONNECT_RECV_ASSIGNED_OBJECT_ID"]
        [::std::mem::align_of::<SIMCONNECT_RECV_ASSIGNED_OBJECT_ID>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV_ASSIGNED_OBJECT_ID::dwRequestID"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_ASSIGNED_OBJECT_ID, dwRequestID) - 12usize];
    ["Offset of field: SIMCONNECT_RECV_ASSIGNED_OBJECT_ID::dwObjectID"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_ASSIGNED_OBJECT_ID, dwObjectID) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_RESERVED_KEY {
    pub _base: SIMCONNECT_RECV,
    pub szChoiceReserved: [::std::os::raw::c_char; 30usize],
    pub szReservedKey: [::std::os::raw::c_char; 50usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_RESERVED_KEY"]
        [::std::mem::size_of::<SIMCONNECT_RECV_RESERVED_KEY>() - 92usize];
    ["Alignment of SIMCONNECT_RECV_RESERVED_KEY"]
        [::std::mem::align_of::<SIMCONNECT_RECV_RESERVED_KEY>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV_RESERVED_KEY::szChoiceReserved"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_RESERVED_KEY, szChoiceReserved) - 12usize];
    ["Offset of field: SIMCONNECT_RECV_RESERVED_KEY::szReservedKey"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_RESERVED_KEY, szReservedKey) - 42usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_SYSTEM_STATE {
    pub _base: SIMCONNECT_RECV,
    pub dwRequestID: DWORD,
    pub dwInteger: DWORD,
    pub fFloat: f32,
    pub szString: [::std::os::raw::c_char; 260usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_SYSTEM_STATE"]
        [::std::mem::size_of::<SIMCONNECT_RECV_SYSTEM_STATE>() - 284usize];
    ["Alignment of SIMCONNECT_RECV_SYSTEM_STATE"]
        [::std::mem::align_of::<SIMCONNECT_RECV_SYSTEM_STATE>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV_SYSTEM_STATE::dwRequestID"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_SYSTEM_STATE, dwRequestID) - 12usize];
    ["Offset of field: SIMCONNECT_RECV_SYSTEM_STATE::dwInteger"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_SYSTEM_STATE, dwInteger) - 16usize];
    ["Offset of field: SIMCONNECT_RECV_SYSTEM_STATE::fFloat"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_SYSTEM_STATE, fFloat) - 20usize];
    ["Offset of field: SIMCONNECT_RECV_SYSTEM_STATE::szString"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_SYSTEM_STATE, szString) - 24usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_CUSTOM_ACTION {
    pub _base: SIMCONNECT_RECV_EVENT,
    pub guidInstanceId: GUID,
    pub dwWaitForCompletion: DWORD,
    pub szPayLoad: [::std::os::raw::c_char; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_CUSTOM_ACTION"]
        [::std::mem::size_of::<SIMCONNECT_RECV_CUSTOM_ACTION>() - 45usize];
    ["Alignment of SIMCONNECT_RECV_CUSTOM_ACTION"]
        [::std::mem::align_of::<SIMCONNECT_RECV_CUSTOM_ACTION>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV_CUSTOM_ACTION::guidInstanceId"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_CUSTOM_ACTION, guidInstanceId) - 24usize];
    ["Offset of field: SIMCONNECT_RECV_CUSTOM_ACTION::dwWaitForCompletion"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_CUSTOM_ACTION, dwWaitForCompletion) - 40usize];
    ["Offset of field: SIMCONNECT_RECV_CUSTOM_ACTION::szPayLoad"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_CUSTOM_ACTION, szPayLoad) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_EVENT_WEATHER_MODE {
    pub _base: SIMCONNECT_RECV_EVENT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_EVENT_WEATHER_MODE"]
        [::std::mem::size_of::<SIMCONNECT_RECV_EVENT_WEATHER_MODE>() - 24usize];
    ["Alignment of SIMCONNECT_RECV_EVENT_WEATHER_MODE"]
        [::std::mem::align_of::<SIMCONNECT_RECV_EVENT_WEATHER_MODE>() - 1usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_FACILITIES_LIST {
    pub _base: SIMCONNECT_RECV,
    pub dwRequestID: DWORD,
    pub dwArraySize: DWORD,
    pub dwEntryNumber: DWORD,
    pub dwOutOf: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_FACILITIES_LIST"]
        [::std::mem::size_of::<SIMCONNECT_RECV_FACILITIES_LIST>() - 28usize];
    ["Alignment of SIMCONNECT_RECV_FACILITIES_LIST"]
        [::std::mem::align_of::<SIMCONNECT_RECV_FACILITIES_LIST>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV_FACILITIES_LIST::dwRequestID"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_FACILITIES_LIST, dwRequestID) - 12usize];
    ["Offset of field: SIMCONNECT_RECV_FACILITIES_LIST::dwArraySize"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_FACILITIES_LIST, dwArraySize) - 16usize];
    ["Offset of field: SIMCONNECT_RECV_FACILITIES_LIST::dwEntryNumber"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_FACILITIES_LIST, dwEntryNumber) - 20usize];
    ["Offset of field: SIMCONNECT_RECV_FACILITIES_LIST::dwOutOf"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_FACILITIES_LIST, dwOutOf) - 24usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_LIST_TEMPLATE {
    pub _base: SIMCONNECT_RECV,
    pub dwRequestID: DWORD,
    pub dwArraySize: DWORD,
    pub dwEntryNumber: DWORD,
    pub dwOutOf: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_LIST_TEMPLATE"]
        [::std::mem::size_of::<SIMCONNECT_RECV_LIST_TEMPLATE>() - 28usize];
    ["Alignment of SIMCONNECT_RECV_LIST_TEMPLATE"]
        [::std::mem::align_of::<SIMCONNECT_RECV_LIST_TEMPLATE>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV_LIST_TEMPLATE::dwRequestID"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_LIST_TEMPLATE, dwRequestID) - 12usize];
    ["Offset of field: SIMCONNECT_RECV_LIST_TEMPLATE::dwArraySize"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_LIST_TEMPLATE, dwArraySize) - 16usize];
    ["Offset of field: SIMCONNECT_RECV_LIST_TEMPLATE::dwEntryNumber"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_LIST_TEMPLATE, dwEntryNumber) - 20usize];
    ["Offset of field: SIMCONNECT_RECV_LIST_TEMPLATE::dwOutOf"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_LIST_TEMPLATE, dwOutOf) - 24usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_DATA_FACILITY_AIRPORT {
    pub Ident: [::std::os::raw::c_char; 6usize],
    pub Region: [::std::os::raw::c_char; 3usize],
    pub Latitude: f64,
    pub Longitude: f64,
    pub Altitude: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_DATA_FACILITY_AIRPORT"]
        [::std::mem::size_of::<SIMCONNECT_DATA_FACILITY_AIRPORT>() - 33usize];
    ["Alignment of SIMCONNECT_DATA_FACILITY_AIRPORT"]
        [::std::mem::align_of::<SIMCONNECT_DATA_FACILITY_AIRPORT>() - 1usize];
    ["Offset of field: SIMCONNECT_DATA_FACILITY_AIRPORT::Ident"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_FACILITY_AIRPORT, Ident) - 0usize];
    ["Offset of field: SIMCONNECT_DATA_FACILITY_AIRPORT::Region"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_FACILITY_AIRPORT, Region) - 6usize];
    ["Offset of field: SIMCONNECT_DATA_FACILITY_AIRPORT::Latitude"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_FACILITY_AIRPORT, Latitude) - 9usize];
    ["Offset of field: SIMCONNECT_DATA_FACILITY_AIRPORT::Longitude"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_FACILITY_AIRPORT, Longitude) - 17usize];
    ["Offset of field: SIMCONNECT_DATA_FACILITY_AIRPORT::Altitude"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_FACILITY_AIRPORT, Altitude) - 25usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_AIRPORT_LIST {
    pub _base: SIMCONNECT_RECV_FACILITIES_LIST,
    pub rgData: [SIMCONNECT_DATA_FACILITY_AIRPORT; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_AIRPORT_LIST"]
        [::std::mem::size_of::<SIMCONNECT_RECV_AIRPORT_LIST>() - 61usize];
    ["Alignment of SIMCONNECT_RECV_AIRPORT_LIST"]
        [::std::mem::align_of::<SIMCONNECT_RECV_AIRPORT_LIST>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV_AIRPORT_LIST::rgData"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_AIRPORT_LIST, rgData) - 28usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_DATA_FACILITY_WAYPOINT {
    pub _base: SIMCONNECT_DATA_FACILITY_AIRPORT,
    pub fMagVar: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_DATA_FACILITY_WAYPOINT"]
        [::std::mem::size_of::<SIMCONNECT_DATA_FACILITY_WAYPOINT>() - 37usize];
    ["Alignment of SIMCONNECT_DATA_FACILITY_WAYPOINT"]
        [::std::mem::align_of::<SIMCONNECT_DATA_FACILITY_WAYPOINT>() - 1usize];
    ["Offset of field: SIMCONNECT_DATA_FACILITY_WAYPOINT::fMagVar"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_FACILITY_WAYPOINT, fMagVar) - 33usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_WAYPOINT_LIST {
    pub _base: SIMCONNECT_RECV_FACILITIES_LIST,
    pub rgData: [SIMCONNECT_DATA_FACILITY_WAYPOINT; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_WAYPOINT_LIST"]
        [::std::mem::size_of::<SIMCONNECT_RECV_WAYPOINT_LIST>() - 65usize];
    ["Alignment of SIMCONNECT_RECV_WAYPOINT_LIST"]
        [::std::mem::align_of::<SIMCONNECT_RECV_WAYPOINT_LIST>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV_WAYPOINT_LIST::rgData"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_WAYPOINT_LIST, rgData) - 28usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_DATA_FACILITY_NDB {
    pub _base: SIMCONNECT_DATA_FACILITY_WAYPOINT,
    pub fFrequency: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_DATA_FACILITY_NDB"]
        [::std::mem::size_of::<SIMCONNECT_DATA_FACILITY_NDB>() - 41usize];
    ["Alignment of SIMCONNECT_DATA_FACILITY_NDB"]
        [::std::mem::align_of::<SIMCONNECT_DATA_FACILITY_NDB>() - 1usize];
    ["Offset of field: SIMCONNECT_DATA_FACILITY_NDB::fFrequency"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_FACILITY_NDB, fFrequency) - 37usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_NDB_LIST {
    pub _base: SIMCONNECT_RECV_FACILITIES_LIST,
    pub rgData: [SIMCONNECT_DATA_FACILITY_NDB; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_NDB_LIST"]
        [::std::mem::size_of::<SIMCONNECT_RECV_NDB_LIST>() - 69usize];
    ["Alignment of SIMCONNECT_RECV_NDB_LIST"]
        [::std::mem::align_of::<SIMCONNECT_RECV_NDB_LIST>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV_NDB_LIST::rgData"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_NDB_LIST, rgData) - 28usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_DATA_FACILITY_VOR {
    pub _base: SIMCONNECT_DATA_FACILITY_NDB,
    pub Flags: DWORD,
    pub fLocalizer: f32,
    pub GlideLat: f64,
    pub GlideLon: f64,
    pub GlideAlt: f64,
    pub fGlideSlopeAngle: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_DATA_FACILITY_VOR"]
        [::std::mem::size_of::<SIMCONNECT_DATA_FACILITY_VOR>() - 77usize];
    ["Alignment of SIMCONNECT_DATA_FACILITY_VOR"]
        [::std::mem::align_of::<SIMCONNECT_DATA_FACILITY_VOR>() - 1usize];
    ["Offset of field: SIMCONNECT_DATA_FACILITY_VOR::Flags"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_FACILITY_VOR, Flags) - 41usize];
    ["Offset of field: SIMCONNECT_DATA_FACILITY_VOR::fLocalizer"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_FACILITY_VOR, fLocalizer) - 45usize];
    ["Offset of field: SIMCONNECT_DATA_FACILITY_VOR::GlideLat"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_FACILITY_VOR, GlideLat) - 49usize];
    ["Offset of field: SIMCONNECT_DATA_FACILITY_VOR::GlideLon"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_FACILITY_VOR, GlideLon) - 57usize];
    ["Offset of field: SIMCONNECT_DATA_FACILITY_VOR::GlideAlt"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_FACILITY_VOR, GlideAlt) - 65usize];
    ["Offset of field: SIMCONNECT_DATA_FACILITY_VOR::fGlideSlopeAngle"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_FACILITY_VOR, fGlideSlopeAngle) - 73usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_VOR_LIST {
    pub _base: SIMCONNECT_RECV_FACILITIES_LIST,
    pub rgData: [SIMCONNECT_DATA_FACILITY_VOR; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_VOR_LIST"]
        [::std::mem::size_of::<SIMCONNECT_RECV_VOR_LIST>() - 105usize];
    ["Alignment of SIMCONNECT_RECV_VOR_LIST"]
        [::std::mem::align_of::<SIMCONNECT_RECV_VOR_LIST>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV_VOR_LIST::rgData"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_VOR_LIST, rgData) - 28usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_FACILITY_DATA {
    pub _base: SIMCONNECT_RECV,
    pub UserRequestId: DWORD,
    pub UniqueRequestId: DWORD,
    pub ParentUniqueRequestId: DWORD,
    pub Type: DWORD,
    pub IsListItem: DWORD,
    pub ItemIndex: DWORD,
    pub ListSize: DWORD,
    pub Data: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_FACILITY_DATA"]
        [::std::mem::size_of::<SIMCONNECT_RECV_FACILITY_DATA>() - 44usize];
    ["Alignment of SIMCONNECT_RECV_FACILITY_DATA"]
        [::std::mem::align_of::<SIMCONNECT_RECV_FACILITY_DATA>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV_FACILITY_DATA::UserRequestId"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_FACILITY_DATA, UserRequestId) - 12usize];
    ["Offset of field: SIMCONNECT_RECV_FACILITY_DATA::UniqueRequestId"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_FACILITY_DATA, UniqueRequestId) - 16usize];
    ["Offset of field: SIMCONNECT_RECV_FACILITY_DATA::ParentUniqueRequestId"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_FACILITY_DATA, ParentUniqueRequestId) - 20usize];
    ["Offset of field: SIMCONNECT_RECV_FACILITY_DATA::Type"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_FACILITY_DATA, Type) - 24usize];
    ["Offset of field: SIMCONNECT_RECV_FACILITY_DATA::IsListItem"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_FACILITY_DATA, IsListItem) - 28usize];
    ["Offset of field: SIMCONNECT_RECV_FACILITY_DATA::ItemIndex"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_FACILITY_DATA, ItemIndex) - 32usize];
    ["Offset of field: SIMCONNECT_RECV_FACILITY_DATA::ListSize"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_FACILITY_DATA, ListSize) - 36usize];
    ["Offset of field: SIMCONNECT_RECV_FACILITY_DATA::Data"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_FACILITY_DATA, Data) - 40usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_FACILITY_DATA_END {
    pub _base: SIMCONNECT_RECV,
    pub RequestId: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_FACILITY_DATA_END"]
        [::std::mem::size_of::<SIMCONNECT_RECV_FACILITY_DATA_END>() - 16usize];
    ["Alignment of SIMCONNECT_RECV_FACILITY_DATA_END"]
        [::std::mem::align_of::<SIMCONNECT_RECV_FACILITY_DATA_END>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV_FACILITY_DATA_END::RequestId"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_FACILITY_DATA_END, RequestId) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_ICAO {
    pub Type: ::std::os::raw::c_char,
    pub Ident: [::std::os::raw::c_char; 6usize],
    pub Region: [::std::os::raw::c_char; 3usize],
    pub Airport: [::std::os::raw::c_char; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_ICAO"][::std::mem::size_of::<SIMCONNECT_ICAO>() - 15usize];
    ["Alignment of SIMCONNECT_ICAO"][::std::mem::align_of::<SIMCONNECT_ICAO>() - 1usize];
    ["Offset of field: SIMCONNECT_ICAO::Type"]
        [::std::mem::offset_of!(SIMCONNECT_ICAO, Type) - 0usize];
    ["Offset of field: SIMCONNECT_ICAO::Ident"]
        [::std::mem::offset_of!(SIMCONNECT_ICAO, Ident) - 1usize];
    ["Offset of field: SIMCONNECT_ICAO::Region"]
        [::std::mem::offset_of!(SIMCONNECT_ICAO, Region) - 7usize];
    ["Offset of field: SIMCONNECT_ICAO::Airport"]
        [::std::mem::offset_of!(SIMCONNECT_ICAO, Airport) - 10usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_DATA_LATLONALT {
    pub Latitude: f64,
    pub Longitude: f64,
    pub Altitude: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_DATA_LATLONALT"]
        [::std::mem::size_of::<SIMCONNECT_DATA_LATLONALT>() - 24usize];
    ["Alignment of SIMCONNECT_DATA_LATLONALT"]
        [::std::mem::align_of::<SIMCONNECT_DATA_LATLONALT>() - 1usize];
    ["Offset of field: SIMCONNECT_DATA_LATLONALT::Latitude"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_LATLONALT, Latitude) - 0usize];
    ["Offset of field: SIMCONNECT_DATA_LATLONALT::Longitude"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_LATLONALT, Longitude) - 8usize];
    ["Offset of field: SIMCONNECT_DATA_LATLONALT::Altitude"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_LATLONALT, Altitude) - 16usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_DATA_PBH {
    pub Pitch: f32,
    pub Bank: f32,
    pub Heading: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_DATA_PBH"][::std::mem::size_of::<SIMCONNECT_DATA_PBH>() - 12usize];
    ["Alignment of SIMCONNECT_DATA_PBH"][::std::mem::align_of::<SIMCONNECT_DATA_PBH>() - 1usize];
    ["Offset of field: SIMCONNECT_DATA_PBH::Pitch"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_PBH, Pitch) - 0usize];
    ["Offset of field: SIMCONNECT_DATA_PBH::Bank"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_PBH, Bank) - 4usize];
    ["Offset of field: SIMCONNECT_DATA_PBH::Heading"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_PBH, Heading) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_FACILITY_MINIMAL {
    pub icao: SIMCONNECT_ICAO,
    pub lla: SIMCONNECT_DATA_LATLONALT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_FACILITY_MINIMAL"]
        [::std::mem::size_of::<SIMCONNECT_FACILITY_MINIMAL>() - 39usize];
    ["Alignment of SIMCONNECT_FACILITY_MINIMAL"]
        [::std::mem::align_of::<SIMCONNECT_FACILITY_MINIMAL>() - 1usize];
    ["Offset of field: SIMCONNECT_FACILITY_MINIMAL::icao"]
        [::std::mem::offset_of!(SIMCONNECT_FACILITY_MINIMAL, icao) - 0usize];
    ["Offset of field: SIMCONNECT_FACILITY_MINIMAL::lla"]
        [::std::mem::offset_of!(SIMCONNECT_FACILITY_MINIMAL, lla) - 15usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_FACILITY_MINIMAL_LIST {
    pub _base: SIMCONNECT_RECV_LIST_TEMPLATE,
    pub rgData: [SIMCONNECT_FACILITY_MINIMAL; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_FACILITY_MINIMAL_LIST"]
        [::std::mem::size_of::<SIMCONNECT_RECV_FACILITY_MINIMAL_LIST>() - 67usize];
    ["Alignment of SIMCONNECT_RECV_FACILITY_MINIMAL_LIST"]
        [::std::mem::align_of::<SIMCONNECT_RECV_FACILITY_MINIMAL_LIST>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV_FACILITY_MINIMAL_LIST::rgData"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_FACILITY_MINIMAL_LIST, rgData) - 28usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_DATA_INITPOSITION {
    pub Latitude: f64,
    pub Longitude: f64,
    pub Altitude: f64,
    pub Pitch: f64,
    pub Bank: f64,
    pub Heading: f64,
    pub OnGround: DWORD,
    pub Airspeed: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_DATA_INITPOSITION"]
        [::std::mem::size_of::<SIMCONNECT_DATA_INITPOSITION>() - 56usize];
    ["Alignment of SIMCONNECT_DATA_INITPOSITION"]
        [::std::mem::align_of::<SIMCONNECT_DATA_INITPOSITION>() - 1usize];
    ["Offset of field: SIMCONNECT_DATA_INITPOSITION::Latitude"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_INITPOSITION, Latitude) - 0usize];
    ["Offset of field: SIMCONNECT_DATA_INITPOSITION::Longitude"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_INITPOSITION, Longitude) - 8usize];
    ["Offset of field: SIMCONNECT_DATA_INITPOSITION::Altitude"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_INITPOSITION, Altitude) - 16usize];
    ["Offset of field: SIMCONNECT_DATA_INITPOSITION::Pitch"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_INITPOSITION, Pitch) - 24usize];
    ["Offset of field: SIMCONNECT_DATA_INITPOSITION::Bank"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_INITPOSITION, Bank) - 32usize];
    ["Offset of field: SIMCONNECT_DATA_INITPOSITION::Heading"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_INITPOSITION, Heading) - 40usize];
    ["Offset of field: SIMCONNECT_DATA_INITPOSITION::OnGround"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_INITPOSITION, OnGround) - 48usize];
    ["Offset of field: SIMCONNECT_DATA_INITPOSITION::Airspeed"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_INITPOSITION, Airspeed) - 52usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_DATA_MARKERSTATE {
    pub szMarkerName: [::std::os::raw::c_char; 64usize],
    pub dwMarkerState: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_DATA_MARKERSTATE"]
        [::std::mem::size_of::<SIMCONNECT_DATA_MARKERSTATE>() - 68usize];
    ["Alignment of SIMCONNECT_DATA_MARKERSTATE"]
        [::std::mem::align_of::<SIMCONNECT_DATA_MARKERSTATE>() - 1usize];
    ["Offset of field: SIMCONNECT_DATA_MARKERSTATE::szMarkerName"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_MARKERSTATE, szMarkerName) - 0usize];
    ["Offset of field: SIMCONNECT_DATA_MARKERSTATE::dwMarkerState"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_MARKERSTATE, dwMarkerState) - 64usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_DATA_WAYPOINT {
    pub Latitude: f64,
    pub Longitude: f64,
    pub Altitude: f64,
    pub Flags: ::std::os::raw::c_ulong,
    pub ktsSpeed: f64,
    pub percentThrottle: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_DATA_WAYPOINT"]
        [::std::mem::size_of::<SIMCONNECT_DATA_WAYPOINT>() - 44usize];
    ["Alignment of SIMCONNECT_DATA_WAYPOINT"]
        [::std::mem::align_of::<SIMCONNECT_DATA_WAYPOINT>() - 1usize];
    ["Offset of field: SIMCONNECT_DATA_WAYPOINT::Latitude"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_WAYPOINT, Latitude) - 0usize];
    ["Offset of field: SIMCONNECT_DATA_WAYPOINT::Longitude"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_WAYPOINT, Longitude) - 8usize];
    ["Offset of field: SIMCONNECT_DATA_WAYPOINT::Altitude"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_WAYPOINT, Altitude) - 16usize];
    ["Offset of field: SIMCONNECT_DATA_WAYPOINT::Flags"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_WAYPOINT, Flags) - 24usize];
    ["Offset of field: SIMCONNECT_DATA_WAYPOINT::ktsSpeed"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_WAYPOINT, ktsSpeed) - 28usize];
    ["Offset of field: SIMCONNECT_DATA_WAYPOINT::percentThrottle"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_WAYPOINT, percentThrottle) - 36usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_DATA_XYZ {
    pub x: f64,
    pub y: f64,
    pub z: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_DATA_XYZ"][::std::mem::size_of::<SIMCONNECT_DATA_XYZ>() - 24usize];
    ["Alignment of SIMCONNECT_DATA_XYZ"][::std::mem::align_of::<SIMCONNECT_DATA_XYZ>() - 1usize];
    ["Offset of field: SIMCONNECT_DATA_XYZ::x"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_XYZ, x) - 0usize];
    ["Offset of field: SIMCONNECT_DATA_XYZ::y"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_XYZ, y) - 8usize];
    ["Offset of field: SIMCONNECT_DATA_XYZ::z"]
        [::std::mem::offset_of!(SIMCONNECT_DATA_XYZ, z) - 16usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_JETWAY_DATA {
    pub AirportIcao: [::std::os::raw::c_char; 8usize],
    pub ParkingIndex: ::std::os::raw::c_int,
    pub Lla: SIMCONNECT_DATA_LATLONALT,
    pub Pbh: SIMCONNECT_DATA_PBH,
    pub Status: ::std::os::raw::c_int,
    pub Door: ::std::os::raw::c_int,
    pub ExitDoorRelativePos: SIMCONNECT_DATA_XYZ,
    pub MainHandlePos: SIMCONNECT_DATA_XYZ,
    pub SecondaryHandle: SIMCONNECT_DATA_XYZ,
    pub WheelGroundLock: SIMCONNECT_DATA_XYZ,
    pub JetwayObjectId: DWORD,
    pub AttachedObjectId: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_JETWAY_DATA"][::std::mem::size_of::<SIMCONNECT_JETWAY_DATA>() - 160usize];
    ["Alignment of SIMCONNECT_JETWAY_DATA"]
        [::std::mem::align_of::<SIMCONNECT_JETWAY_DATA>() - 1usize];
    ["Offset of field: SIMCONNECT_JETWAY_DATA::AirportIcao"]
        [::std::mem::offset_of!(SIMCONNECT_JETWAY_DATA, AirportIcao) - 0usize];
    ["Offset of field: SIMCONNECT_JETWAY_DATA::ParkingIndex"]
        [::std::mem::offset_of!(SIMCONNECT_JETWAY_DATA, ParkingIndex) - 8usize];
    ["Offset of field: SIMCONNECT_JETWAY_DATA::Lla"]
        [::std::mem::offset_of!(SIMCONNECT_JETWAY_DATA, Lla) - 12usize];
    ["Offset of field: SIMCONNECT_JETWAY_DATA::Pbh"]
        [::std::mem::offset_of!(SIMCONNECT_JETWAY_DATA, Pbh) - 36usize];
    ["Offset of field: SIMCONNECT_JETWAY_DATA::Status"]
        [::std::mem::offset_of!(SIMCONNECT_JETWAY_DATA, Status) - 48usize];
    ["Offset of field: SIMCONNECT_JETWAY_DATA::Door"]
        [::std::mem::offset_of!(SIMCONNECT_JETWAY_DATA, Door) - 52usize];
    ["Offset of field: SIMCONNECT_JETWAY_DATA::ExitDoorRelativePos"]
        [::std::mem::offset_of!(SIMCONNECT_JETWAY_DATA, ExitDoorRelativePos) - 56usize];
    ["Offset of field: SIMCONNECT_JETWAY_DATA::MainHandlePos"]
        [::std::mem::offset_of!(SIMCONNECT_JETWAY_DATA, MainHandlePos) - 80usize];
    ["Offset of field: SIMCONNECT_JETWAY_DATA::SecondaryHandle"]
        [::std::mem::offset_of!(SIMCONNECT_JETWAY_DATA, SecondaryHandle) - 104usize];
    ["Offset of field: SIMCONNECT_JETWAY_DATA::WheelGroundLock"]
        [::std::mem::offset_of!(SIMCONNECT_JETWAY_DATA, WheelGroundLock) - 128usize];
    ["Offset of field: SIMCONNECT_JETWAY_DATA::JetwayObjectId"]
        [::std::mem::offset_of!(SIMCONNECT_JETWAY_DATA, JetwayObjectId) - 152usize];
    ["Offset of field: SIMCONNECT_JETWAY_DATA::AttachedObjectId"]
        [::std::mem::offset_of!(SIMCONNECT_JETWAY_DATA, AttachedObjectId) - 156usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_JETWAY_DATA {
    pub _base: SIMCONNECT_RECV_LIST_TEMPLATE,
    pub rgData: [SIMCONNECT_JETWAY_DATA; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_JETWAY_DATA"]
        [::std::mem::size_of::<SIMCONNECT_RECV_JETWAY_DATA>() - 188usize];
    ["Alignment of SIMCONNECT_RECV_JETWAY_DATA"]
        [::std::mem::align_of::<SIMCONNECT_RECV_JETWAY_DATA>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV_JETWAY_DATA::rgData"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_JETWAY_DATA, rgData) - 28usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_ACTION_CALLBACK {
    pub _base: SIMCONNECT_RECV,
    pub szActionID: [::std::os::raw::c_char; 260usize],
    pub cbRequestId: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_ACTION_CALLBACK"]
        [::std::mem::size_of::<SIMCONNECT_RECV_ACTION_CALLBACK>() - 276usize];
    ["Alignment of SIMCONNECT_RECV_ACTION_CALLBACK"]
        [::std::mem::align_of::<SIMCONNECT_RECV_ACTION_CALLBACK>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV_ACTION_CALLBACK::szActionID"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_ACTION_CALLBACK, szActionID) - 12usize];
    ["Offset of field: SIMCONNECT_RECV_ACTION_CALLBACK::cbRequestId"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_ACTION_CALLBACK, cbRequestId) - 272usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_INPUT_EVENT_DESCRIPTOR {
    pub Name: [::std::os::raw::c_char; 64usize],
    pub Hash: ::std::os::raw::c_ulonglong,
    pub eType: SIMCONNECT_INPUT_EVENT_TYPE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_INPUT_EVENT_DESCRIPTOR"]
        [::std::mem::size_of::<SIMCONNECT_INPUT_EVENT_DESCRIPTOR>() - 76usize];
    ["Alignment of SIMCONNECT_INPUT_EVENT_DESCRIPTOR"]
        [::std::mem::align_of::<SIMCONNECT_INPUT_EVENT_DESCRIPTOR>() - 1usize];
    ["Offset of field: SIMCONNECT_INPUT_EVENT_DESCRIPTOR::Name"]
        [::std::mem::offset_of!(SIMCONNECT_INPUT_EVENT_DESCRIPTOR, Name) - 0usize];
    ["Offset of field: SIMCONNECT_INPUT_EVENT_DESCRIPTOR::Hash"]
        [::std::mem::offset_of!(SIMCONNECT_INPUT_EVENT_DESCRIPTOR, Hash) - 64usize];
    ["Offset of field: SIMCONNECT_INPUT_EVENT_DESCRIPTOR::eType"]
        [::std::mem::offset_of!(SIMCONNECT_INPUT_EVENT_DESCRIPTOR, eType) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_ENUMERATE_INPUT_EVENTS {
    pub _base: SIMCONNECT_RECV_LIST_TEMPLATE,
    pub rgData: [SIMCONNECT_INPUT_EVENT_DESCRIPTOR; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_ENUMERATE_INPUT_EVENTS"]
        [::std::mem::size_of::<SIMCONNECT_RECV_ENUMERATE_INPUT_EVENTS>() - 104usize];
    ["Alignment of SIMCONNECT_RECV_ENUMERATE_INPUT_EVENTS"]
        [::std::mem::align_of::<SIMCONNECT_RECV_ENUMERATE_INPUT_EVENTS>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV_ENUMERATE_INPUT_EVENTS::rgData"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_ENUMERATE_INPUT_EVENTS, rgData) - 28usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_GET_INPUT_EVENT {
    pub _base: SIMCONNECT_RECV,
    pub dwRequestID: DWORD,
    pub eType: SIMCONNECT_INPUT_EVENT_TYPE,
    pub Value: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_GET_INPUT_EVENT"]
        [::std::mem::size_of::<SIMCONNECT_RECV_GET_INPUT_EVENT>() - 24usize];
    ["Alignment of SIMCONNECT_RECV_GET_INPUT_EVENT"]
        [::std::mem::align_of::<SIMCONNECT_RECV_GET_INPUT_EVENT>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV_GET_INPUT_EVENT::dwRequestID"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_GET_INPUT_EVENT, dwRequestID) - 12usize];
    ["Offset of field: SIMCONNECT_RECV_GET_INPUT_EVENT::eType"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_GET_INPUT_EVENT, eType) - 16usize];
    ["Offset of field: SIMCONNECT_RECV_GET_INPUT_EVENT::Value"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_GET_INPUT_EVENT, Value) - 20usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_SUBSCRIBE_INPUT_EVENT {
    pub _base: SIMCONNECT_RECV,
    pub Hash: UINT64,
    pub eType: SIMCONNECT_INPUT_EVENT_TYPE,
    pub Value: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_SUBSCRIBE_INPUT_EVENT"]
        [::std::mem::size_of::<SIMCONNECT_RECV_SUBSCRIBE_INPUT_EVENT>() - 28usize];
    ["Alignment of SIMCONNECT_RECV_SUBSCRIBE_INPUT_EVENT"]
        [::std::mem::align_of::<SIMCONNECT_RECV_SUBSCRIBE_INPUT_EVENT>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV_SUBSCRIBE_INPUT_EVENT::Hash"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_SUBSCRIBE_INPUT_EVENT, Hash) - 12usize];
    ["Offset of field: SIMCONNECT_RECV_SUBSCRIBE_INPUT_EVENT::eType"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_SUBSCRIBE_INPUT_EVENT, eType) - 20usize];
    ["Offset of field: SIMCONNECT_RECV_SUBSCRIBE_INPUT_EVENT::Value"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_SUBSCRIBE_INPUT_EVENT, Value) - 24usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_ENUMERATE_INPUT_EVENT_PARAMS {
    pub _base: SIMCONNECT_RECV,
    pub Hash: UINT64,
    pub Value: [::std::os::raw::c_char; 260usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_ENUMERATE_INPUT_EVENT_PARAMS"]
        [::std::mem::size_of::<SIMCONNECT_RECV_ENUMERATE_INPUT_EVENT_PARAMS>() - 280usize];
    ["Alignment of SIMCONNECT_RECV_ENUMERATE_INPUT_EVENT_PARAMS"]
        [::std::mem::align_of::<SIMCONNECT_RECV_ENUMERATE_INPUT_EVENT_PARAMS>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV_ENUMERATE_INPUT_EVENT_PARAMS::Hash"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_ENUMERATE_INPUT_EVENT_PARAMS, Hash) - 12usize];
    ["Offset of field: SIMCONNECT_RECV_ENUMERATE_INPUT_EVENT_PARAMS::Value"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_ENUMERATE_INPUT_EVENT_PARAMS, Value) - 20usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_VERSION_BASE_TYPE {
    pub Major: ::std::os::raw::c_ushort,
    pub Minor: ::std::os::raw::c_ushort,
    pub Revision: ::std::os::raw::c_ushort,
    pub Build: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_VERSION_BASE_TYPE"]
        [::std::mem::size_of::<SIMCONNECT_VERSION_BASE_TYPE>() - 8usize];
    ["Alignment of SIMCONNECT_VERSION_BASE_TYPE"]
        [::std::mem::align_of::<SIMCONNECT_VERSION_BASE_TYPE>() - 1usize];
    ["Offset of field: SIMCONNECT_VERSION_BASE_TYPE::Major"]
        [::std::mem::offset_of!(SIMCONNECT_VERSION_BASE_TYPE, Major) - 0usize];
    ["Offset of field: SIMCONNECT_VERSION_BASE_TYPE::Minor"]
        [::std::mem::offset_of!(SIMCONNECT_VERSION_BASE_TYPE, Minor) - 2usize];
    ["Offset of field: SIMCONNECT_VERSION_BASE_TYPE::Revision"]
        [::std::mem::offset_of!(SIMCONNECT_VERSION_BASE_TYPE, Revision) - 4usize];
    ["Offset of field: SIMCONNECT_VERSION_BASE_TYPE::Build"]
        [::std::mem::offset_of!(SIMCONNECT_VERSION_BASE_TYPE, Build) - 6usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_CONTROLLER_ITEM {
    pub DeviceName: [::std::os::raw::c_char; 256usize],
    pub DeviceId: ::std::os::raw::c_uint,
    pub ProductId: ::std::os::raw::c_uint,
    pub CompositeID: ::std::os::raw::c_uint,
    pub HardwareVersion: SIMCONNECT_VERSION_BASE_TYPE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_CONTROLLER_ITEM"]
        [::std::mem::size_of::<SIMCONNECT_CONTROLLER_ITEM>() - 276usize];
    ["Alignment of SIMCONNECT_CONTROLLER_ITEM"]
        [::std::mem::align_of::<SIMCONNECT_CONTROLLER_ITEM>() - 1usize];
    ["Offset of field: SIMCONNECT_CONTROLLER_ITEM::DeviceName"]
        [::std::mem::offset_of!(SIMCONNECT_CONTROLLER_ITEM, DeviceName) - 0usize];
    ["Offset of field: SIMCONNECT_CONTROLLER_ITEM::DeviceId"]
        [::std::mem::offset_of!(SIMCONNECT_CONTROLLER_ITEM, DeviceId) - 256usize];
    ["Offset of field: SIMCONNECT_CONTROLLER_ITEM::ProductId"]
        [::std::mem::offset_of!(SIMCONNECT_CONTROLLER_ITEM, ProductId) - 260usize];
    ["Offset of field: SIMCONNECT_CONTROLLER_ITEM::CompositeID"]
        [::std::mem::offset_of!(SIMCONNECT_CONTROLLER_ITEM, CompositeID) - 264usize];
    ["Offset of field: SIMCONNECT_CONTROLLER_ITEM::HardwareVersion"]
        [::std::mem::offset_of!(SIMCONNECT_CONTROLLER_ITEM, HardwareVersion) - 268usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_CONTROLLERS_LIST {
    pub _base: SIMCONNECT_RECV_LIST_TEMPLATE,
    pub rgData: [SIMCONNECT_CONTROLLER_ITEM; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SIMCONNECT_RECV_CONTROLLERS_LIST"]
        [::std::mem::size_of::<SIMCONNECT_RECV_CONTROLLERS_LIST>() - 304usize];
    ["Alignment of SIMCONNECT_RECV_CONTROLLERS_LIST"]
        [::std::mem::align_of::<SIMCONNECT_RECV_CONTROLLERS_LIST>() - 1usize];
    ["Offset of field: SIMCONNECT_RECV_CONTROLLERS_LIST::rgData"]
        [::std::mem::offset_of!(SIMCONNECT_RECV_CONTROLLERS_LIST, rgData) - 28usize];
};
pub type DispatchProc = ::std::option::Option<
    unsafe extern "C" fn(
        pData: *mut SIMCONNECT_RECV,
        cbData: DWORD,
        pContext: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn SimConnect_MapClientEventToSimEvent(
        hSimConnect: HANDLE,
        EventID: SIMCONNECT_CLIENT_EVENT_ID,
        EventName: *const ::std::os::raw::c_char,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_TransmitClientEvent(
        hSimConnect: HANDLE,
        ObjectID: SIMCONNECT_OBJECT_ID,
        EventID: SIMCONNECT_CLIENT_EVENT_ID,
        dwData: DWORD,
        GroupID: SIMCONNECT_NOTIFICATION_GROUP_ID,
        Flags: SIMCONNECT_EVENT_FLAG,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_SetSystemEventState(
        hSimConnect: HANDLE,
        EventID: SIMCONNECT_CLIENT_EVENT_ID,
        dwState: SIMCONNECT_STATE,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_AddClientEventToNotificationGroup(
        hSimConnect: HANDLE,
        GroupID: SIMCONNECT_NOTIFICATION_GROUP_ID,
        EventID: SIMCONNECT_CLIENT_EVENT_ID,
        bMaskable: BOOL,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_RemoveClientEvent(
        hSimConnect: HANDLE,
        GroupID: SIMCONNECT_NOTIFICATION_GROUP_ID,
        EventID: SIMCONNECT_CLIENT_EVENT_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_SetNotificationGroupPriority(
        hSimConnect: HANDLE,
        GroupID: SIMCONNECT_NOTIFICATION_GROUP_ID,
        uPriority: DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_ClearNotificationGroup(
        hSimConnect: HANDLE,
        GroupID: SIMCONNECT_NOTIFICATION_GROUP_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_RequestNotificationGroup(
        hSimConnect: HANDLE,
        GroupID: SIMCONNECT_NOTIFICATION_GROUP_ID,
        dwReserved: DWORD,
        Flags: DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_AddToDataDefinition(
        hSimConnect: HANDLE,
        DefineID: SIMCONNECT_DATA_DEFINITION_ID,
        DatumName: *const ::std::os::raw::c_char,
        UnitsName: *const ::std::os::raw::c_char,
        DatumType: SIMCONNECT_DATATYPE,
        fEpsilon: f32,
        DatumID: DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_ClearDataDefinition(
        hSimConnect: HANDLE,
        DefineID: SIMCONNECT_DATA_DEFINITION_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_RequestDataOnSimObject(
        hSimConnect: HANDLE,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
        DefineID: SIMCONNECT_DATA_DEFINITION_ID,
        ObjectID: SIMCONNECT_OBJECT_ID,
        Period: SIMCONNECT_PERIOD,
        Flags: SIMCONNECT_DATA_REQUEST_FLAG,
        origin: DWORD,
        interval: DWORD,
        limit: DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_RequestDataOnSimObjectType(
        hSimConnect: HANDLE,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
        DefineID: SIMCONNECT_DATA_DEFINITION_ID,
        dwRadiusMeters: DWORD,
        type_: SIMCONNECT_SIMOBJECT_TYPE,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_SetDataOnSimObject(
        hSimConnect: HANDLE,
        DefineID: SIMCONNECT_DATA_DEFINITION_ID,
        ObjectID: SIMCONNECT_OBJECT_ID,
        Flags: SIMCONNECT_DATA_SET_FLAG,
        ArrayCount: DWORD,
        cbUnitSize: DWORD,
        pDataSet: *mut ::std::os::raw::c_void,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_MapInputEventToClientEvent(
        hSimConnect: HANDLE,
        GroupID: SIMCONNECT_INPUT_GROUP_ID,
        szInputDefinition: *const ::std::os::raw::c_char,
        DownEventID: SIMCONNECT_CLIENT_EVENT_ID,
        DownValue: DWORD,
        UpEventID: SIMCONNECT_CLIENT_EVENT_ID,
        UpValue: DWORD,
        bMaskable: BOOL,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_SetInputGroupPriority(
        hSimConnect: HANDLE,
        GroupID: SIMCONNECT_INPUT_GROUP_ID,
        uPriority: DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_RemoveInputEvent(
        hSimConnect: HANDLE,
        GroupID: SIMCONNECT_INPUT_GROUP_ID,
        szInputDefinition: *const ::std::os::raw::c_char,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_ClearInputGroup(
        hSimConnect: HANDLE,
        GroupID: SIMCONNECT_INPUT_GROUP_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_SetInputGroupState(
        hSimConnect: HANDLE,
        GroupID: SIMCONNECT_INPUT_GROUP_ID,
        dwState: DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_RequestReservedKey(
        hSimConnect: HANDLE,
        EventID: SIMCONNECT_CLIENT_EVENT_ID,
        szKeyChoice1: *const ::std::os::raw::c_char,
        szKeyChoice2: *const ::std::os::raw::c_char,
        szKeyChoice3: *const ::std::os::raw::c_char,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_SubscribeToSystemEvent(
        hSimConnect: HANDLE,
        EventID: SIMCONNECT_CLIENT_EVENT_ID,
        SystemEventName: *const ::std::os::raw::c_char,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_UnsubscribeFromSystemEvent(
        hSimConnect: HANDLE,
        EventID: SIMCONNECT_CLIENT_EVENT_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_WeatherRequestInterpolatedObservation(
        hSimConnect: HANDLE,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
        lat: f32,
        lon: f32,
        alt: f32,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_WeatherRequestObservationAtStation(
        hSimConnect: HANDLE,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
        szICAO: *const ::std::os::raw::c_char,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_WeatherRequestObservationAtNearestStation(
        hSimConnect: HANDLE,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
        lat: f32,
        lon: f32,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_WeatherCreateStation(
        hSimConnect: HANDLE,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
        szICAO: *const ::std::os::raw::c_char,
        szName: *const ::std::os::raw::c_char,
        lat: f32,
        lon: f32,
        alt: f32,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_WeatherRemoveStation(
        hSimConnect: HANDLE,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
        szICAO: *const ::std::os::raw::c_char,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_WeatherSetObservation(
        hSimConnect: HANDLE,
        Seconds: DWORD,
        szMETAR: *const ::std::os::raw::c_char,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_WeatherSetModeServer(
        hSimConnect: HANDLE,
        dwPort: DWORD,
        dwSeconds: DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_WeatherSetModeTheme(
        hSimConnect: HANDLE,
        szThemeName: *const ::std::os::raw::c_char,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_WeatherSetModeGlobal(hSimConnect: HANDLE) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_WeatherSetModeCustom(hSimConnect: HANDLE) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_WeatherSetDynamicUpdateRate(hSimConnect: HANDLE, dwRate: DWORD) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_WeatherRequestCloudState(
        hSimConnect: HANDLE,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
        minLat: f32,
        minLon: f32,
        minAlt: f32,
        maxLat: f32,
        maxLon: f32,
        maxAlt: f32,
        dwFlags: DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_WeatherCreateThermal(
        hSimConnect: HANDLE,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
        lat: f32,
        lon: f32,
        alt: f32,
        radius: f32,
        height: f32,
        coreRate: f32,
        coreTurbulence: f32,
        sinkRate: f32,
        sinkTurbulence: f32,
        coreSize: f32,
        coreTransitionSize: f32,
        sinkLayerSize: f32,
        sinkTransitionSize: f32,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_WeatherRemoveThermal(
        hSimConnect: HANDLE,
        ObjectID: SIMCONNECT_OBJECT_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_AICreateParkedATCAircraft(
        hSimConnect: HANDLE,
        szContainerTitle: *const ::std::os::raw::c_char,
        szTailNumber: *const ::std::os::raw::c_char,
        szAirportID: *const ::std::os::raw::c_char,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_AICreateEnrouteATCAircraft(
        hSimConnect: HANDLE,
        szContainerTitle: *const ::std::os::raw::c_char,
        szTailNumber: *const ::std::os::raw::c_char,
        iFlightNumber: ::std::os::raw::c_int,
        szFlightPlanPath: *const ::std::os::raw::c_char,
        dFlightPlanPosition: f64,
        bTouchAndGo: BOOL,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_AICreateNonATCAircraft(
        hSimConnect: HANDLE,
        szContainerTitle: *const ::std::os::raw::c_char,
        szTailNumber: *const ::std::os::raw::c_char,
        InitPos: SIMCONNECT_DATA_INITPOSITION,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_AICreateSimulatedObject(
        hSimConnect: HANDLE,
        szContainerTitle: *const ::std::os::raw::c_char,
        InitPos: SIMCONNECT_DATA_INITPOSITION,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_AIReleaseControl(
        hSimConnect: HANDLE,
        ObjectID: SIMCONNECT_OBJECT_ID,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_AIRemoveObject(
        hSimConnect: HANDLE,
        ObjectID: SIMCONNECT_OBJECT_ID,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_AISetAircraftFlightPlan(
        hSimConnect: HANDLE,
        ObjectID: SIMCONNECT_OBJECT_ID,
        szFlightPlanPath: *const ::std::os::raw::c_char,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_ExecuteMissionAction(hSimConnect: HANDLE, guidInstanceId: GUID) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_CompleteCustomMissionAction(
        hSimConnect: HANDLE,
        guidInstanceId: GUID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_Close(hSimConnect: HANDLE) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_RetrieveString(
        pData: *mut SIMCONNECT_RECV,
        cbData: DWORD,
        pStringV: *mut ::std::os::raw::c_void,
        pszString: *mut *mut ::std::os::raw::c_char,
        pcbString: *mut DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_GetLastSentPacketID(hSimConnect: HANDLE, pdwError: *mut DWORD) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_Open(
        phSimConnect: *mut HANDLE,
        szName: LPCSTR,
        hWnd: HWND,
        UserEventWin32: DWORD,
        hEventHandle: HANDLE,
        ConfigIndex: DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_CallDispatch(
        hSimConnect: HANDLE,
        pfcnDispatch: DispatchProc,
        pContext: *mut ::std::os::raw::c_void,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_GetNextDispatch(
        hSimConnect: HANDLE,
        ppData: *mut *mut SIMCONNECT_RECV,
        pcbData: *mut DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_RequestResponseTimes(
        hSimConnect: HANDLE,
        nCount: DWORD,
        fElapsedSeconds: *mut f32,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_InsertString(
        pDest: *mut ::std::os::raw::c_char,
        cbDest: DWORD,
        ppEnd: *mut *mut ::std::os::raw::c_void,
        pcbStringV: *mut DWORD,
        pSource: *const ::std::os::raw::c_char,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_CameraSetRelative6DOF(
        hSimConnect: HANDLE,
        fDeltaX: f32,
        fDeltaY: f32,
        fDeltaZ: f32,
        fPitchDeg: f32,
        fBankDeg: f32,
        fHeadingDeg: f32,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_MenuAddItem(
        hSimConnect: HANDLE,
        szMenuItem: *const ::std::os::raw::c_char,
        MenuEventID: SIMCONNECT_CLIENT_EVENT_ID,
        dwData: DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_MenuDeleteItem(
        hSimConnect: HANDLE,
        MenuEventID: SIMCONNECT_CLIENT_EVENT_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_MenuAddSubItem(
        hSimConnect: HANDLE,
        MenuEventID: SIMCONNECT_CLIENT_EVENT_ID,
        szMenuItem: *const ::std::os::raw::c_char,
        SubMenuEventID: SIMCONNECT_CLIENT_EVENT_ID,
        dwData: DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_MenuDeleteSubItem(
        hSimConnect: HANDLE,
        MenuEventID: SIMCONNECT_CLIENT_EVENT_ID,
        SubMenuEventID: SIMCONNECT_CLIENT_EVENT_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_RequestSystemState(
        hSimConnect: HANDLE,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
        szState: *const ::std::os::raw::c_char,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_SetSystemState(
        hSimConnect: HANDLE,
        szState: *const ::std::os::raw::c_char,
        dwInteger: DWORD,
        fFloat: f32,
        szString: *const ::std::os::raw::c_char,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_MapClientDataNameToID(
        hSimConnect: HANDLE,
        szClientDataName: *const ::std::os::raw::c_char,
        ClientDataID: SIMCONNECT_CLIENT_DATA_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_CreateClientData(
        hSimConnect: HANDLE,
        ClientDataID: SIMCONNECT_CLIENT_DATA_ID,
        dwSize: DWORD,
        Flags: SIMCONNECT_CREATE_CLIENT_DATA_FLAG,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_AddToClientDataDefinition(
        hSimConnect: HANDLE,
        DefineID: SIMCONNECT_CLIENT_DATA_DEFINITION_ID,
        dwOffset: DWORD,
        dwSizeOrType: DWORD,
        fEpsilon: f32,
        DatumID: DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_ClearClientDataDefinition(
        hSimConnect: HANDLE,
        DefineID: SIMCONNECT_CLIENT_DATA_DEFINITION_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_RequestClientData(
        hSimConnect: HANDLE,
        ClientDataID: SIMCONNECT_CLIENT_DATA_ID,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
        DefineID: SIMCONNECT_CLIENT_DATA_DEFINITION_ID,
        Period: SIMCONNECT_CLIENT_DATA_PERIOD,
        Flags: SIMCONNECT_CLIENT_DATA_REQUEST_FLAG,
        origin: DWORD,
        interval: DWORD,
        limit: DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_SetClientData(
        hSimConnect: HANDLE,
        ClientDataID: SIMCONNECT_CLIENT_DATA_ID,
        DefineID: SIMCONNECT_CLIENT_DATA_DEFINITION_ID,
        Flags: SIMCONNECT_CLIENT_DATA_SET_FLAG,
        dwReserved: DWORD,
        cbUnitSize: DWORD,
        pDataSet: *mut ::std::os::raw::c_void,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_FlightLoad(
        hSimConnect: HANDLE,
        szFileName: *const ::std::os::raw::c_char,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_FlightSave(
        hSimConnect: HANDLE,
        szFileName: *const ::std::os::raw::c_char,
        szTitle: *const ::std::os::raw::c_char,
        szDescription: *const ::std::os::raw::c_char,
        Flags: DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_FlightPlanLoad(
        hSimConnect: HANDLE,
        szFileName: *const ::std::os::raw::c_char,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_Text(
        hSimConnect: HANDLE,
        type_: SIMCONNECT_TEXT_TYPE,
        fTimeSeconds: f32,
        EventID: SIMCONNECT_CLIENT_EVENT_ID,
        cbUnitSize: DWORD,
        pDataSet: *mut ::std::os::raw::c_void,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_SubscribeToFacilities(
        hSimConnect: HANDLE,
        type_: SIMCONNECT_FACILITY_LIST_TYPE,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_UnsubscribeToFacilities(
        hSimConnect: HANDLE,
        type_: SIMCONNECT_FACILITY_LIST_TYPE,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_RequestFacilitiesList(
        hSimConnect: HANDLE,
        type_: SIMCONNECT_FACILITY_LIST_TYPE,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_TransmitClientEvent_EX1(
        hSimConnect: HANDLE,
        ObjectID: SIMCONNECT_OBJECT_ID,
        EventID: SIMCONNECT_CLIENT_EVENT_ID,
        GroupID: SIMCONNECT_NOTIFICATION_GROUP_ID,
        Flags: SIMCONNECT_EVENT_FLAG,
        dwData0: DWORD,
        dwData1: DWORD,
        dwData2: DWORD,
        dwData3: DWORD,
        dwData4: DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_AddToFacilityDefinition(
        hSimConnect: HANDLE,
        DefineID: SIMCONNECT_DATA_DEFINITION_ID,
        FieldName: *const ::std::os::raw::c_char,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_RequestFacilityData(
        hSimConnect: HANDLE,
        DefineID: SIMCONNECT_DATA_DEFINITION_ID,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
        ICAO: *const ::std::os::raw::c_char,
        Region: *const ::std::os::raw::c_char,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_SubscribeToFacilities_EX1(
        hSimConnect: HANDLE,
        type_: SIMCONNECT_FACILITY_LIST_TYPE,
        newElemInRangeRequestID: SIMCONNECT_DATA_REQUEST_ID,
        oldElemOutRangeRequestID: SIMCONNECT_DATA_REQUEST_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_UnsubscribeToFacilities_EX1(
        hSimConnect: HANDLE,
        type_: SIMCONNECT_FACILITY_LIST_TYPE,
        bUnsubscribeNewInRange: bool,
        bUnsubscribeOldOutRange: bool,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_RequestFacilitiesList_EX1(
        hSimConnect: HANDLE,
        type_: SIMCONNECT_FACILITY_LIST_TYPE,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_RequestFacilityData_EX1(
        hSimConnect: HANDLE,
        DefineID: SIMCONNECT_DATA_DEFINITION_ID,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
        ICAO: *const ::std::os::raw::c_char,
        Region: *const ::std::os::raw::c_char,
        Type: ::std::os::raw::c_char,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_RequestJetwayData(
        hSimConnect: HANDLE,
        AirportIcao: *const ::std::os::raw::c_char,
        ArrayCount: DWORD,
        Indexes: *mut ::std::os::raw::c_int,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_EnumerateControllers(hSimConnect: HANDLE) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_MapInputEventToClientEvent_EX1(
        hSimConnect: HANDLE,
        GroupID: SIMCONNECT_INPUT_GROUP_ID,
        szInputDefinition: *const ::std::os::raw::c_char,
        DownEventID: SIMCONNECT_CLIENT_EVENT_ID,
        DownValue: DWORD,
        UpEventID: SIMCONNECT_CLIENT_EVENT_ID,
        UpValue: DWORD,
        bMaskable: BOOL,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_ExecuteAction(
        hSimConnect: HANDLE,
        cbRequestID: DWORD,
        szActionID: *const ::std::os::raw::c_char,
        cbUnitSize: DWORD,
        pParamValues: *mut ::std::os::raw::c_void,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_EnumerateInputEvents(
        hSimConnect: HANDLE,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_GetInputEvent(
        hSimConnect: HANDLE,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
        Hash: UINT64,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_SetInputEvent(
        hSimConnect: HANDLE,
        Hash: UINT64,
        cbUnitSize: DWORD,
        Value: *mut ::std::os::raw::c_void,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_SubscribeInputEvent(hSimConnect: HANDLE, Hash: UINT64) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_UnsubscribeInputEvent(hSimConnect: HANDLE, Hash: UINT64) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_EnumerateInputEventParams(hSimConnect: HANDLE, Hash: UINT64) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_AddFacilityDataDefinitionFilter(
        hSimConnect: HANDLE,
        DefineID: SIMCONNECT_DATA_DEFINITION_ID,
        szFilterPath: *const ::std::os::raw::c_char,
        cbUnitSize: DWORD,
        pFilterData: *mut ::std::os::raw::c_void,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_ClearAllFacilityDataDefinitionFilters(
        hSimConnect: HANDLE,
        DefineID: SIMCONNECT_DATA_DEFINITION_ID,
    ) -> HRESULT;
}
